####################################################
# TEMPLATES - GARAGE                               #
####################################################
    
  - sensor:

######### GARAGE MAIN - SAFETY HEATER #########
    - name: Garage Safety Control Status
      #unique_id: garage_safety_control_status
      #unit_of_measurement: ''
      #state_class: measurement
      #device_class: none
      icon: mdi:server
      availability: >
        {{ not is_state('sensor.garage_safety_heartbeat', 'unavailable') }}
      state: >
        {% if states.sensor.garage_safety_heartbeat is defined %}
          {% set status = not is_state('sensor.garage_safety_heartbeat','unavailable') %}
          {% set heartbeat = ((as_timestamp(now()) - as_timestamp(states.sensor.garage_safety_heartbeat.last_changed))) <= 15 %}
        {% else %}
          {% set status = false %}
          {% set heartbeat = false %}
        {% endif %}
        
        {% if status and heartbeat %}
          Running...
        {% else %}
          ERROR
        {% endif %}
      attributes:
        heartbeat: "{{ states('sensor.garage_safety_heartbeat') }}"
        f_temp: "{{ states('sensor.garage_safety_front_temperature') }}"
        f_relay: "{{ is_state('binary_sensor.garage_front_safety_active','on') }}"
        f_aux: "{{ is_state('binary_sensor.garagefrontheater_ac','on') }}"
        f_coil: "{{ is_state('switch.garage_front_heater','on') }}"
        r_temp: "{{ states('sensor.garage_safety_rear_temperature') }}"
        r_aux: "{{ is_state('binary_sensor.garagerearheater_ac','on') }}"
        r_relay: "{{ is_state('binary_sensor.garage_rear_safety_active','on') }}"
        r_coil: "{{ is_state('switch.garage_rear_heater','on') }}"


######### GARAGE SLAVE - SENSORS #########

    - name: Air Compressor Pressure
      #unique_id: air_compressor_pressure
      unit_of_measurement: 'psi'
      state_class: measurement
      #device_class: pressure
      icon: mdi:gauge
      availability: >
        {{ not is_state('sensor.air_compressor_pressure_raw', 'unavailable') }}
      state: >
        {% set RP = states('sensor.air_compressor_pressure_raw')|float %}
        {% set min = 0.5|float %} 
        {% set span = 4.0|float %}
        {% set presmax = 200.0|float %}
        
        {% if RP < 104 and RP > 30 %}
          {% set RP = 104.0 %}
        {% endif %}
        
        {% set ax = (presmax / span)|float %}
        {% set b = (ax * min * -1.0)|float %}
        {% set ax = ((ax * 5.0) / 1023.0)|float %}
        
        {% set PV = ((ax*RP)+b)|float %}
        
        {% if PV < -0.2 or PV > presmax %}
          {{ "unknown" }}
        {% elif PV < 1.0 %}
          {{ 0.0 | round(1) }}
        {% elif is_state('binary_sensor.reset_sensors_graphs', 'on') %}
          {{ 0.0 | round(1) }}
        {% else %}
          {{ PV | round(1, "half") }}
        {% endif %}
      attributes:
        pres_raw: "{{ states('sensor.air_compressor_pressure_raw') }}"
    
    
  - binary_sensor:
  
    - unique_id: garagefrontlight_status
      #name: Garage Front Light
      #device_class: none
      icon: >
        {% if is_state('input_select.garagefrontlight_mode', 'Force Off') %}
          mdi:lightbulb-off
        {% else %}
          mdi:lightbulb
        {% endif %}
      availability: >
        {{ not is_state('switch.garage_front_light', 'unavailable') }}
      state: >
        {{ is_state('switch.garage_front_light', 'on') }}
      attributes:
        friendly_name: Garage Front Light
        mode: "{{ states('input_select.garagefrontlight_mode') }}"
        schedule: >-
          {% if is_state('input_select.garagefrontlight_mode', '24/7') %}
            Always ON
          {% elif is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') %}
            Stays OFF for power outlet Halloween decorations, except if doors are unlocked
          {% elif is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
            Stays OFF for power outlet Christmas decorations, except if doors are unlocked
          {% elif is_state('input_select.garagefrontlight_mode', 'Sunset to 23h') %}
            Turns ON at sunset until 23h
          {% elif is_state('input_select.garagefrontlight_mode', 'Sunset to Sunrise') %}
            Turns ON at sunset until sunrise next day
          {% else %}
            Always OFF
          {% endif %}
  
    - unique_id: garagefrontpower_status
      #name: Garage Front Power
      #device_class: none
      icon: >
        {% if is_state('input_select.garagefrontpower_mode', '24/7') %}
          mdi:power-plug
        {% elif is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') %}
          mdi:pumpkin
        {% elif is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
          mdi:pine-tree
        {% else %}
          mdi:power-plug-off
        {% endif %}
      availability: >
        {{ not is_state('switch.garage_front_power', 'unavailable') }}
      state: >
        {{ is_state('switch.garage_front_power', 'on') }}
      attributes:
        # friendly_name: >-
        #   {% if is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') or is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
        #     {{ states('input_select.poweroutlet_mode') }}
        #   {% else %}
        #     Power Outlet
        #   {% endif %}
        friendly_name: Garage Front Power
        mode: "{{ states('input_select.garagefrontpower_mode') }}"
        schedule: >-
          {% if is_state('input_select.garagefrontpower_mode', '24/7') %}
            Always ON
          {% elif is_state('input_select.garagefrontpower_mode', 'Fountain') %}
            Turns ON at sunrise until 10PM. Will turn ON if outside temperature is freezing
          {% elif is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') %}
            Turns ON an hour before sunset or at 4PM, turns OFF at 11PM. On Halloween night, turns ON at 7AM until midnight
          {% elif is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
            Turns ON an hour before sunset or at 4PM, turns OFF at 11PM. On Christmas night, turns ON at 7AM until midnight
          {% else %}
            Always OFF
          {% endif %}
 
    - unique_id: garagefrontheater_error
      #name: Garage Front Heater OK
      #device_class: none
      icon: >
        {% if is_state('binary_sensor.garagefrontheater_error', 'off') %}
          mdi:shield-alert
        {% else %}
          mdi:shield-check
        {% endif %}
      availability: >
        {{ not is_state('switch.garage_front_power', 'unavailable') }}
      state: >
        {% if states.sensor.garage_safety_heartbeat is defined %}
          {% set heartbeat = ((as_timestamp(now()) - as_timestamp(states.sensor.garage_safety_heartbeat.last_changed))) <= 15 %}
        {% else %}
          {% set heartbeat = false %}
        {% endif %}
        
        {% set auxcontact = is_state('binary_sensor.garagefrontheater_ac','on') %}
        {% set safetycoil = is_state('binary_sensor.garage_front_safety_active','on') %}
        {% set safetysensor = is_state('binary_sensor.garage_safety_front_ok','on') %}
        {% set heatercoil = is_state('switch.garage_front_heater','on') %}
        {% set temp = states('sensor.garage_safety_front_temperature')|float < 0 or states('sensor.garage_safety_front_temperature')|float > 40 %}
        
        {% set ERR = false %}
        
        {% if not heartbeat %}
          {% set ERR = true %}
        {% elif temp or not safetysensor %}
          {% set ERR = true %}
        {% elif safetycoil and not auxcontact %}
          {% set ERR = false %}
        {% elif heatercoil and not auxcontact %}
          {% set ERR = false %}
        {% elif auxcontact and not (safetycoil or heatercoil) %}
          {% set ERR = false %}
        {% endif %}
        
        {{Â not ERRÂ }}
      attributes:
        friendly_name: Garage Front Heater OK
        heartbeat: "{{ states('sensor.garage_safety_heartbeat') }}"
        temp: "{{ states('sensor.garage_safety_front_temperature') }}"
        aux: "{{ is_state('binary_sensor.garagefrontheater_ac','on') }}"
        relay: "{{ is_state('binary_sensor.garage_front_safety_active','on') }}"
        coil: "{{ is_state('switch.garage_front_heater','on') }}"
        
    - unique_id: garagerearheater_error
      #name: Garage Rear Heater OK
      #device_class: none
      icon: >
        {% if is_state('binary_sensor.garagerearheater_error', 'off') %}
          mdi:shield-alert
        {% else %}
          mdi:shield-check
        {% endif %}
      availability: >
        {{ not is_state('switch.garage_front_power', 'unavailable') }}
      state: >
        {% if states.sensor.garage_safety_heartbeat is defined %}
          {% set heartbeat = ((as_timestamp(now()) - as_timestamp(states.sensor.garage_safety_heartbeat.last_changed))) <= 15 %}
        {% else %}
          {% set heartbeat = false %}
        {% endif %}
        
        {% set auxcontact = is_state('binary_sensor.garagerearheater_ac','on') %}
        {% set safetycoil = is_state('binary_sensor.garage_rear_safety_active','on') %}
        {% set safetysensor = is_state('binary_sensor.garage_safety_rear_ok','on') %}
        {% set heatercoil = is_state('switch.garage_rear_heater','on') %}
        {% set temp = states('sensor.garage_safety_rear_temperature')|float < 0 or states('sensor.garage_safety_rear_temperature')|float > 40 %}
        
        {% set ERR = false %}
        
        {% if heartbeat %}
          {% set ERR = true %}
        {% elif temp or not safetysensor %}
          {% set ERR = true %}
        {% elif safetycoil and not auxcontact %}
          {% set ERR = false %}
        {% elif heatercoil and not auxcontact %}
          {% set ERR = false %}
        {% elif auxcontact and not (safetycoil or heatercoil) %}
          {% set ERR = false %}
        {% endif %}
        
        {{Â not ERRÂ }}
      attributes:
        friendly_name: Garage Rear Heater OK
        heartbeat: "{{ states('sensor.garage_safety_heartbeat') }}"
        temp: "{{ states('sensor.garage_safety_rear_temperature') }}"
        aux: "{{ is_state('binary_sensor.garagerearheater_ac','on') }}"
        relay: "{{ is_state('binary_sensor.garage_rear_safety_active','on') }}"
        coil: "{{ is_state('switch.garage_rear_heater','on') }}"
    