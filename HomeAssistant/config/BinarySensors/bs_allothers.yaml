####################################################
# BINARY SENSORS                                   #
####################################################

  - platform: workday
    name: Workday Jean
    country: 'CA'
    province: 'QC'
    excludes: [sat, sun, holiday]
    add_holidays:
      - '2019-12-02'
      - '2019-12-03'
      - '2019-12-04'
      - '2019-12-05'
      - '2019-12-06'
      - '2019-12-09'
      - '2019-12-10'
      - '2019-12-11'
      - '2019-12-12'
      - '2019-12-13'
      - '2019-12-24'
      - '2019-12-26'
      - '2019-12-31'
      - '2020-01-01'
      
  - platform: workday
    name: Workday Cindy
    country: 'CA'
    province: 'QC'
    excludes: [sat, sun, holiday]
    add_holidays:
      - '2019-12-02'
      - '2019-12-03'
      - '2019-12-04'
      - '2019-12-05'
      - '2019-12-06'
      - '2019-12-09'
      - '2019-12-10'
      - '2019-12-11'
      - '2019-12-12'
      - '2019-12-13'
      - '2019-12-24'
      - '2019-12-26'
      - '2019-12-31'
      - '2020-01-01'

  - platform: threshold
    name: "Antifreeze Active"
    entity_id: sensor.outdoor_temperature
    lower: 5.0
    hysteresis: 0.75
    
  - platform: template
    sensors:
      power_peakperiod:
        friendly_name: "Hydro-QuÃ©bec Peak Period"
        device_class: cold
        value_template: >
          {% set month = state_attr('sensor.dates', 'month')|int %}
          {% set hourmin = state_attr('sensor.times', 'hourmin')|int %}
          {% set T = states('sensor.outdoor_temperature')|float %}
          
          {% if month in (12,1,2,3) and T < -20.0 %}
            {% if hourmin >= 600 and hourmin <= 900 %}
              {{ true }}
            {% elif hourmin >= 1600 and hourmin <= 2000 %}
              {{ true }}
            {% else %}
              {{ false }}
            {% endif %}
          {% else %}
            {{ false }}
          {% endif %}
      
      reset_sensors_graphs:
        friendly_name: "Reset Sensors Graphs"
        value_template: >
          {% if state_attr('sensor.times', 'sec_midnight')|int < 5 %}
            {{ true }}
          {% elif is_state('input_boolean.force_reset_graphs', 'on') %}
            {{ true }}
          {% else %}
            {{ false }}
          {% endif %}

      ha_update_available:
        friendly_name: "HA Update Available"
        availability_template: >-
          {{ states('sensor.ha_installed_version') != 'unavailable' and 
                states('sensor.ha_installed_version') != 'unknown' and 
                states('sensor.ha_latest_version') != 'unavailable' and 
                states('sensor.ha_latest_version') != 'unknown' }}
        value_template: >
          {% if states('sensor.ha_installed_version') != states('sensor.ha_latest_version') %}
            {{ true }}
          {% else %}
            {{ false }}
          {% endif %}
        icon_template: >
          {% if states('sensor.ha_installed_version') == 'unavailable' or states('sensor.ha_installed_version') == 'unknown' or states('sensor.ha_latest_version') == 'unavailable' or states('sensor.ha_latest_version') == 'unknown' %}
            mdi:cloud-question
          {% elif states('sensor.ha_installed_version') != states('sensor.ha_latest_version') %}
            mdi:cloud-download
          {% elif states('sensor.ha_installed_version') == states('sensor.ha_latest_version') %}
            mdi:cloud-check
          {% else %}
            mdi:cloud-question
          {% endif %}
        attribute_templates:
          current: "{{ states('sensor.ha_installed_version') }}"
          latest: "{{ states('sensor.ha_latest_version') }}"
          major_update: "{{ states('sensor.ha_latest_version')[5:]|int - states('sensor.ha_installed_version')[5:]|int > 0 }}"
          breaking_changes: "{{ states('sensor.potential_breaking_changes') }}"
          