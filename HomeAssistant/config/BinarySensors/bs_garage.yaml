####################################################
# BINARY SENSORS - GARAGE                          #
####################################################

######### GARAGE MAIN #########
  - platform: template
    sensors:
      garagefrontlight_status:
        friendly_name: Garage Front Light
        value_template: >
          {{ is_state('switch.garage_front_light', 'on') }}
        availability_template: >
          {{ not is_state('switch.garage_front_light', 'unavailable') }}
        icon_template: >
          {% if is_state('input_select.garagefrontlight_mode', 'Force Off') %}
            mdi:lightbulb-off
          {% else %}
            mdi:lightbulb
          {% endif %}
        attribute_templates:
          mode: "{{ states('input_select.garagefrontlight_mode') }}"
          schedule: >-
            {% if is_state('input_select.garagefrontlight_mode', '24/7') %}
              Always ON
            {% elif is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') %}
              Stays OFF for power outlet Halloween decorations, except if doors are unlocked
            {% elif is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
              Stays OFF for power outlet Christmas decorations, except if doors are unlocked
            {% elif is_state('input_select.garagefrontlight_mode', 'Sunset to 23h') %}
              Turns ON at sunset until 23h
            {% elif is_state('input_select.garagefrontlight_mode', 'Sunset to Sunrise') %}
              Turns ON at sunset until sunrise next day
            {% else %}
              Always OFF
            {% endif %}
  
  - platform: template
    sensors:
      garagefrontpower_status:
        friendly_name: Garage Front Power
        # friendly_name: >-
        #   {% if is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') or is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
        #     {{ states.input_select.poweroutlet_mode.state }}
        #   {% else %}
        #     Power Outlet
        #   {% endif %}
        value_template: >
          {{ is_state('switch.garage_front_power', 'on') }}
        availability_template: >
          {{ not is_state('switch.garage_front_power', 'unavailable') }}
        icon_template: >
          {% if is_state('input_select.garagefrontpower_mode', '24/7') %}
            mdi:power-plug
          {% elif is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') %}
            mdi:pumpkin
          {% elif is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
            mdi:pine-tree
          {% else %}
            mdi:power-plug-off
          {% endif %}
        attribute_templates:
          mode: "{{ states('input_select.garagefrontpower_mode') }}"
          schedule: >-
            {% if is_state('input_select.garagefrontpower_mode', '24/7') %}
              Always ON
            {% elif is_state('input_select.garagefrontpower_mode', 'Fountain') %}
              Turns ON at sunrise until 10PM. Will turn ON if outside temperature is freezing
            {% elif is_state('input_select.garagefrontpower_mode', 'Halloween Decorations') %}
              Turns ON an hour before sunset or at 4PM, turns OFF at 11PM. On Halloween night, turns ON at 7AM until midnight
            {% elif is_state('input_select.garagefrontpower_mode', 'Christmas Decorations') %}
              Turns ON an hour before sunset or at 4PM, turns OFF at 11PM. On Christmas night, turns ON at 7AM until midnight
            {% else %}
              Always OFF
            {% endif %}
          
  - platform: mqtt
    name: Garage Attic Light
    state_topic: "Garage/Control/Sensors/Stts"
    availability:
      - topic: "Garage/Control/LWT"
    value_template: '{{ value_json.attic_light }}'
    qos: 0
        
  - platform: template
    sensors:
      garagefrontheater_error:
        friendly_name: "Garage Front Heater OK"
        value_template: >
          {% set heartbeat = ((as_timestamp(now()) - as_timestamp(states.sensor.garage_safety_heartbeat.last_changed))) > 15 %}
          {% set auxcontact = states.binary_sensor.garagefrontheater_ac.state == 'on' %}
          {% set safetycoil = states.binary_sensor.garage_front_safety_active.state == 'on' %}
          {% set safetysensor = states.binary_sensor.garage_safety_front_ok.state == 'on' %}
          {% set heatercoil = states.switch.garage_front_heater.state == 'on' %}
          {% set temp = states.sensor.garage_safety_front_temperature.state|float < 0 or states.sensor.garage_safety_front_temperature.state|float > 40 %}
          
          {% set ERR = false %}
          
          {% if heartbeat %}
            {% set ERR = true %}
          {% elif temp or not safetysensor %}
            {% set ERR = true %}
          {% elif safetycoil and not auxcontact %}
            {% set ERR = false %}
          {% elif heatercoil and not auxcontact %}
            {% set ERR = false %}
          {% elif auxcontact and not (safetycoil or heatercoil) %}
            {% set ERR = false %}
          {% endif %}
          
          {{ not ERR }}
        icon_template: >
          {% if is_state('binary_sensor.garagefrontheater_error', 'off') %}
            mdi:shield-alert
          {% else %}
            mdi:shield-check
          {% endif %}
        attribute_templates:
          heartbeat: "{{ states.sensor.garage_safety_heartbeat.state }}"
          temp: "{{ states.sensor.garage_safety_front_temperature.state }}"
          aux: "{{ states.binary_sensor.garagefrontheater_ac.state == 'on' }}"
          relay: "{{ states.binary_sensor.garage_front_safety_active.state == 'on' }}"
          coil: "{{ states.switch.garage_front_heater.state == 'on' }}"
      garagerearheater_error:
        friendly_name: "Garage Rear Heater OK"
        value_template: >
          {% set heartbeat = ((as_timestamp(now()) - as_timestamp(states.sensor.garage_safety_heartbeat.last_changed))) > 15 %}
          {% set auxcontact = states.binary_sensor.garagerearheater_ac.state == 'on' %}
          {% set safetycoil = states.binary_sensor.garage_rear_safety_active.state == 'on' %}
          {% set safetysensor = states.binary_sensor.garage_safety_rear_ok.state == 'on' %}
          {% set heatercoil = states.switch.garage_rear_heater.state == 'on' %}
          {% set temp = states.sensor.garage_safety_rear_temperature.state|float < 0 or states.sensor.garage_safety_rear_temperature.state|float > 40 %}
          
          {% set ERR = false %}
          
          {% if heartbeat %}
            {% set ERR = true %}
          {% elif temp or not safetysensor %}
            {% set ERR = true %}
          {% elif safetycoil and not auxcontact %}
            {% set ERR = false %}
          {% elif heatercoil and not auxcontact %}
            {% set ERR = false %}
          {% elif auxcontact and not (safetycoil or heatercoil) %}
            {% set ERR = false %}
          {% endif %}
          
          {{ not ERR }}
        icon_template: >
          {% if is_state('binary_sensor.garagerearheater_error', 'off') %}
            mdi:shield-alert
          {% else %}
            mdi:shield-check
          {% endif %}
        attribute_templates:
          heartbeat: "{{ states.sensor.garage_safety_heartbeat.state }}"
          temp: "{{ states.sensor.garage_safety_rear_temperature.state }}"
          aux: "{{ states.binary_sensor.garagerearheater_ac.state == 'on' }}"
          relay: "{{ states.binary_sensor.garage_rear_safety_active.state == 'on' }}"
          coil: "{{ states.switch.garage_rear_heater.state == 'on' }}"
          
######### GARAGE SLAVE #########
  - platform: mqtt
    name: Garage Air Valve Closed
    state_topic: "Garage/Slave/Sensors/Stts"
    availability:
      - topic: "Garage/Slave/LWT"
    value_template: '{{ value_json.air_gclosed }}'
    qos: 0
    
  - platform: mqtt
    name: House Air Valve Closed
    state_topic: "Garage/Slave/Sensors/Stts"
    availability:
      - topic: "Garage/Slave/LWT"
    value_template: '{{ value_json.air_hclosed }}'
    qos: 0
    