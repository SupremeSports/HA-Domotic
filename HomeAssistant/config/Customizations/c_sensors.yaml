##########################################
# CUSTOMIZATIONS - SENSORS               #
##########################################

# STANDARD COLORS
#=========================================
# Icon Online:  var(--state-icon-color) --> #007AFF
# Icon Offline: var(--state-icon-unavailable-color) --> #4F5F78
# Icon Active:  var(--state-icon-active-color) --> #FBCD41
# Red:          FF0000
# Yellow:       FFFF00
# Orange:       FFA500
# Lt Purple:    A500FF
# Dk Purple:    5C005C
# Lt Green:     00FF00
# Gold:         A3852A

  sensor.postal_battery:
    friendly_name: "Postal Battery"
    templates:
       icon_color: >
        if (state <= 0) return 'var(--state-icon-unavailable-color)';
        if (state < 30)
        {
           if (entities['binary_sensor.flashing_1s'].state === 'off') return 'red';
           return 'var(--state-icon-unavailable-color)';
        }
        if (state < 50) return '#FFA500';
        if (state <= 100) return 'var(--state-icon-color)';
        return 'var(--state-icon-unavailable-color)';
  sensor.postal_status:
    friendly_name: "Postal Status"
    templates:
      icon: >
        if (state === 'New Mail') return 'mdi:mailbox-up';
        return 'mdi:mailbox';
      icon_color: >
        if (state === 'Unavailable') return 'var(--state-icon-unavailable-color)';
        if (state === 'No Mail') return 'var(--state-icon-color)';
        if (state === 'New Mail') return 'var(--state-icon-active-color)';
        
  sensor.water_valve_status:
    friendly_name: "Water Valve State"
    templates:
      icon_color: >
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        if (state === 'Opening') return 'red';
        if (state === 'Closing') return 'red';
        if (state === 'Opened') return 'var(--state-icon-active-color)';
        return 'var(--state-icon-color)';
    
  # TED5000 and ENERGY SENSORS
  sensor.ted5000_mtu0_energy_daily_cost:
    friendly_name: "House Daily Energy Cost"
    
  sensor.ted5000_mtu1_power:
    friendly_name: "Main Power"
  sensor.ted5000_mtu1_voltage:
    friendly_name: "Main Voltage"
  sensor.ted5000_mtu1_energy_daily:
    friendly_name: "Main Daily Energy"
  sensor.ted5000_mtu1_energy_monthly:
    friendly_name: "Main Monthly Energy"
  sensor.ted5000_mtu1_pf:
    friendly_name: "Main Power Factor"
    
  sensor.ted5000_mtu2_power:
    friendly_name: "Garage Power"
  sensor.ted5000_mtu2_voltage:
    friendly_name: "Garage Voltage"
  sensor.ted5000_mtu2_energy_daily:
    friendly_name: "Garage Daily Energy"
  sensor.ted5000_mtu2_energy_monthly:
    friendly_name: "Garage Monthly Energy"
  sensor.ted5000_mtu2_pf:
    friendly_name: "Garage Power Factor"
    
  sensor.ted5000_mtu3_power:
    friendly_name: "Pool Power"
  sensor.ted5000_mtu3_voltage:
    friendly_name: "Pool Voltage"
  sensor.ted5000_mtu3_energy_daily:
    friendly_name: "Pool Daily Energy"
  sensor.ted5000_mtu3_energy_monthly:
    friendly_name: "Pool Monthly Energy"
  sensor.ted5000_mtu3_pf:
    friendly_name: "Pool Power Factor"
    
  sensor.ted5000_utility_currentrate:
    friendly_name: "Utility Current Rate"
    # unit_of_measurement: "$/kWh"
  sensor.ted5000_utility_currenttier:
    friendly_name: "Utility Current Tier"
  sensor.ted5000_utility_plantype:
    friendly_name: "Utility Plan Type"
  sensor.ted5000_utility_currenttou:
    friendly_name: "Utility Current TOU"
  sensor.ted5000_utility_currenttoudescription:
    friendly_name: "Utility Current TOU"
  sensor.ted5000_utility_daysleftinbillingcycle:
    friendly_name: "Utility Days Left Billing Cycle"
  sensor.ted5000_utility_mtus:
    friendly_name: "MTU Quantity"
  sensor.ted5000_utility_carbonrate:
    friendly_name: "Utility Carbon Rate"
  sensor.ted5000_utility_meterreaddate:
    friendly_name: "Meter Read Date"
    
  sensor.ted5000_energyusedtier1:
    templates:
      icon: >
        if (state < 90) return 'mdi:flash';
        if (state < 100) return 'mdi:flash-alert';
        return 'mdi:flash-off';
      icon_color: >
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        if (state < 90) return 'green';
        if (state < 100) return 'yellow';
        return 'red';
        
  sensor.ted5000_energylefttier1:
    templates:
      icon: >
        if (entities['sensor.ted5000_energyusedtier1'].state < 90 ) return 'mdi:flash';
        if (entities['sensor.ted5000_energyusedtier1'].state < 100 ) return 'mdi:flash-alert';
        return 'mdi:flash-off';
      icon_color: >
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        if (entities['sensor.ted5000_energyusedtier1'].state < 90 ) return 'green';
        if (entities['sensor.ted5000_energyusedtier1'].state < 100 ) return 'yellow';
        return 'red';
        
  sensor.garage_average_temp:
    unit_of_measurement: "Â°C"
    icon: mdi:thermometer
    device_class: temperature
    state_class: measurement
    
  sensor.garage_mean_temp:
    icon: mdi:thermometer
    device_class: temperature
    state_class: measurement
    
  sensor.garage_mean_humidity:
    icon: mdi:water-percent
    device_class: humidity
    state_class: measurement
 
  sensor.outdoor_temperature:
    icon: mdi:thermometer 
    templates:
      icon_color: >
        if (state >= 45) return 'red';
        if (state >= 40) return '#FFA500';
        if (state >= 30) return '#FFFF00';
        if (state >= 20) return '#00FF00';
        if (state >= 10) return '#00FF80';
        if (state >= 0) return '#00FFC7';
        if (state >= -10) return '#00FFFF';
        if (state >= -20) return '#00A5FF';
        if (state >= -30) return '#0010ff';
        if (state >= -40) return '#A500FF';
        if (state >= -80) return '#5C005C';
        return 'var(--state-icon-unavailable-color)';

  sensor.outdoor_humidity:
    icon: mdi:water-percent
    templates:
      icon_color: >
        if (state >= 80) return 'red';
        if (state >= 70) return '#FFA500';
        if (state >= 60) return '#FFFF00';
        if (state >= 20) return '#00FF00';
        if (state >= 0) return '#00FFC7';
        return 'var(--state-icon-unavailable-color)';

  sensor.outdoor_rain_sensor:
    templates:
      icon_color: >
        if (state === 'Not Raining') return 'var(--state-icon-color)';
        if (state === 'Raining') return '#FFFF00';
        if (state === 'Pouring') return '#FFA500';
        return 'var(--state-icon-unavailable-color)';

  sensor.collect_trash_week:
    templates:
      icon_color: >
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        if (state === 'unknown') return 'var(--state-icon-unavailable-color)';
        if (attributes.tomorrow === 'on') return 'var(--state-icon-active-color)';
        if (attributes.today === 'on') return 'var(--state-icon-active-color)';
        return '#046E00';

  sensor.collect_recycle_week:
    templates:
      icon_color: >
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        if (state === 'unknown') return 'var(--state-icon-unavailable-color)';
        if (attributes.tomorrow === 'on') return 'var(--state-icon-active-color)';
        if (attributes.today === 'on') return 'var(--state-icon-active-color)';
        return '#007AFF';
        
  sensor.collect_compost_week:
    templates:
      icon_color: >
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        if (state === 'unknown') return 'var(--state-icon-unavailable-color)';
        if (attributes.tomorrow === 'on') return 'var(--state-icon-active-color)';
        if (attributes.today === 'on') return 'var(--state-icon-active-color)';
        return '#754300';

  sensor.party_18_ans_cody:
    templates:
      icon_color: >
        if (entities['input_boolean.running_hass'].state === 'off') return 'var(--state-icon-color)';
        if (entities['sensor.dates'].attributes['day'] === '11' ) 
        {
          if (entities['sensor.dates'].attributes['month'] === '01') 
          {
            if (entities['sensor.dates'].attributes['year'] === '2037' ) 
            {
              if (entities['binary_sensor.flashing_1s'].state === 'off') return 'var(--state-icon-active-color)';
              return 'var(--state-icon-unavailable-color)';
            }
            return 'var(--state-icon-active-color)';
          }
        }
        return 'var(--state-icon-color)';
        
  sensor.stepper_wall_clock:
    templates:
      icon_color: >
        if (state === 'Ok') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'var(--state-icon-color)';
        
  sensor.pool_clock_status:
    friendly_name: "Pool Clock Status"
    templates:
      icon_color: >
        if (state === 'Running...') return 'var(--state-icon-color)';
        if (state === 'On') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'red';
        
  sensor.garage_clock_status:
    friendly_name: "Garage Clock Status"
    templates:
      icon_color: >
        if (state === 'Running...') return 'var(--state-icon-color)';
        if (state === 'On') return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'red';
        
  sensor.pool_gates:
    templates:
      icon: >
        if (state === 'Ok') return 'mdi:shield-lock';
        return 'mdi:close-octagon';
      icon_color: >
        if (state === 'Ok') return 'green';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'red';

  sensor.master_bed_presence:
    friendly_name: "Master Bed Presence"
        
  sensor.garage_cd_status:
    templates:
      icon: >
        if (state === 'Ok') return 'mdi:shield-lock';
        if (state === 'Opening') return 'mdi:arrow-up-bold-box';
        if (state === 'Closing') return 'mdi:arrow-down-bold-box';
        if ((state === 'Fully Opened') || (state === 'Opened')) return 'mdi:garage-open-variant';
        return 'mdi:close-octagon';
      icon_color: >
        if (state === 'Ok') return 'green';
        if ((state === 'Opening') || (state === 'Closing'))
        {
          if (entities['binary_sensor.flashing_1s'].state === 'off') return 'var(--state-icon-active-color)';
          return 'var(--state-icon-unavailable-color)';
        }
        if ((state === 'Fully Opened') || (state === 'Opened')) return 'var(--state-icon-active-color)';
        if (state === 'unavailable') return 'var(--state-icon-unavailable-color)';
        return 'red';
        
  sensor.ups_status:
    templates:
      icon: >
        if (state === 'ONLINE') return 'mdi:power-plug';
        return 'mdi:power-plug-off';
      icon_color: >
        if (state === 'ONLINE') return 'var(--state-icon-active-color)';
        if (state === 'ONBATT') return 'var(--state-icon-color)';
        return 'var(--state-icon-unavailable-color)';
  
  sensor.ups_battery:
    templates:
      icon: >
        if (state >= 99) return 'mdi:battery';
        if (entities['sensor.ups_status'].state === 'ONLINE')
        {
          if (state <= 5) return 'mdi:battery-charging-outline';
          if (state <= 10) return 'mdi:battery-charging-10';
          if (state <= 20) return 'mdi:battery-charging-20';
          if (state <= 30) return 'mdi:battery-charging-30';
          if (state <= 40) return 'mdi:battery-charging-40';
          if (state <= 50) return 'mdi:battery-charging-50';
          if (state <= 60) return 'mdi:battery-charging-60';
          if (state <= 70) return 'mdi:battery-charging-70';
          if (state <= 80) return 'mdi:battery-charging-80';
          if (state <= 90) return 'mdi:battery-charging-90';
          if (state <= 100) return 'mdi:battery-charging-100';
        }
        else
        {
          if (state <= 5) return 'mdi:battery-outline';
          if (state <= 10) return 'mdi:battery-10';
          if (state <= 20) return 'mdi:battery-20';
          if (state <= 30) return 'mdi:battery-30';
          if (state <= 40) return 'mdi:battery-40';
          if (state <= 50) return 'mdi:battery-50';
          if (state <= 60) return 'mdi:battery-60';
          if (state <= 70) return 'mdi:battery-70';
          if (state <= 80) return 'mdi:battery-80';
          if (state <= 90) return 'mdi:battery-90';
          if (state <= 100) return 'mdi:battery-100';
        }
        return 'mdi:battery-unknown';
      icon_color: >
        if (state > 70) return 'var(--label-badge-green)';
        if (state > 45) return 'var(--label-badge-yellow)';
        if (state > 0) return 'var(--label-badge-red)';
        return 'var(--state-icon-unavailable-color)';
        
  sensor.soldering_station_status:
    templates:
      icon: >
        if (state === 'On') return 'mdi:soldering-iron';
        if (state === 'Off') return 'mdi:pen-remove';
        return 'mdi:pen-off';
      icon_color: >
        if (state === 'On') return 'var(--state-icon-active-color)';
        if (state === 'Off') return 'var(--state-icon-color)';
        if (state === 'Ready') return 'var(--state-icon-color)';
        return 'var(--state-icon-unavailable-color)';
        
  sensor.total_water_utility_used:
    unit_of_measurement: L
    device_class: water
    
  sensor.pool_filler_timer:
    unit_of_measurement: h
    templates:
      value: > 
        return Math.round(state * 600)/10.0;