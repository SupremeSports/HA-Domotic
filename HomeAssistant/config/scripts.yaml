####################################################
# SCRIPTS                                          #
####################################################

  none:
    alias: Dummy Script
    mode: queued
    max: 25
    sequence: []
    # sequence:
      # - delay:
          # milliseconds: 1

#DOOR Lock & Unlock
  clear_locks:
    alias: Clear Lock Script
    sequence:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.doorlock_passcode
          value: ""
      - delay: 00:00:01
      - service: input_boolean.turn_off
        entity_id: group.locks
      - service: input_boolean.turn_off
        entity_id: group.garagedoors

  lock:
    alias: Lock Script
    sequence:
      - service: lock.lock
        data_template:
          entity_id: lock.{{ entity_id }}_lock
      - service: script.turn_on
        entity_id: script.clear_locks
          
  unlock:
    alias: Unlock Script
    sequence:
      - service: lock.unlock
        data_template:
          entity_id: lock.{{ entity_id }}_lock
      - service: script.turn_on
        entity_id: script.clear_locks
           
  lockall:
    alias: Lock ALL Script
    sequence:
      - service: lock.lock
        entity_id: group.all_locks
      - delay: 00:00:01
      - service: script.turn_on
        entity_id: script.clear_locks

#DOMAINS "turn_on" & "turn_off"
  switch_turn_on:
    alias: Switch Turn ON
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ states('switch.'~entity_id) }}
      - if: "{{ current_state != 'on' }}"
        then:
          - alias: "Then turn switch on"
            service: switch.turn_on
            data_template:
              entity_id: switch.{{ entity_id }}
  switch_turn_off:
    alias: Switch Turn OFF
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ states('switch.'~entity_id) }}
      - if: "{{ current_state != 'off' }}"
        then:
          - alias: "Then turn switch off"
            service: switch.turn_off
            data_template:
              entity_id: switch.{{ entity_id }}

  light_turn_on:
    alias: Light Turn ON
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ states('light.'~entity_id) }}
      - if: "{{ current_state != 'on' }}"
        then:
          - alias: "Then turn light on"
            service: light.turn_on
            data_template:
              entity_id: light.{{ entity_id }}
  light_turn_off:
    alias: Light Turn OFF
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ states('light.'~entity_id) }}
      - if: "{{ current_state != 'off' }}"
        then:
          - alias: "Then turn light off"
            service: light.turn_off
            data_template:
              entity_id: light.{{ entity_id }}
              
  cover_open:
    alias: Cover Open
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ state_attr('cover.'~entity_id,'current_position')|float(100) }}
      - if: "{{ current_state < 100 }}"
        then:
          - alias: "Then open cover"
            service: cover.open_cover
            data_template:
              entity_id: cover.{{ entity_id }}
  cover_close:
    alias: Cover Close
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ state_attr('cover.'~entity_id,'current_position')|float(0) }}
      - if: "{{ current_state > 0 }}"
        then:
          - alias: "Then close cover"
            service: cover.close_cover
            data_template:
              entity_id: cover.{{ entity_id }}
  cover_position:
    alias: Cover Position
    mode: queued
    max: 25
    sequence:
      - variables:
          current_state: >
            {{ state_attr('cover.'~entity_id,'current_position')|float(-1) }}
          requested_position: >
            {{ open_percent|int(-1) }}
      - if: "{{ current_state != requested_position and current_state >= 0 and requested_position >= 0 }}"
        then:
          - alias: "Then set cover to position"
            service: cover.set_cover_position
            data_template:
              entity_id: cover.{{ entity_id }}
              position: "{{ requested_position }}"

# GARAGE DOOR
  # garagedoor:
    # alias: Garage Door Script
    # sequence:
      # - service: cover.toggle
        # data_template:
          # entity_id: cover.{{ entity_id }}_opener
      # - service: script.turn_on
        # entity_id: script.clear_locks
        
  garagedoor_ctrl:
    alias: Garage Door Control Script
    sequence:
      - service: script.turn_on
        entity_id: script.clear_locks
      - condition: template
        value_template: "{{ ok }}"
      - service: mqtt.publish
        data_template: {"topic": "{{ topic_prefix }}/Cmd", "payload": "{\"{{ command }}\": \"ON\"}"}

  cars:
    alias: Cars Script
    sequence:
      - service: mqtt.publish
        data_template: {"topic": "Home/Cars/Cmd/{{ id }}", "payload": "{\"{{ command }}\": \"ON\"}"}
      - delay: 00:00:01
      - service: input_boolean.turn_off
        entity_id: group.cars
        
  control_boxes:
    alias: Control Boxes Script
    sequence:
      - service: mqtt.publish
        data_template: {"topic": "{{ topic_prefix }}/Cmd", "payload": "{\"reset\": \"ON\"}"}
      - delay: 00:00:01
      - service: input_boolean.turn_off
        entity_id: group.control_boxes
          
  milightspeed:
    alias: Milight Speed
    sequence:
      - service: mqtt.publish
        data_template: {"topic": "{{ topic }}", "payload": "{\"speed\": \"{{ command }}\"}"}

  milightsynchelp:
    alias: Milight Sync Help Notification
    sequence:
      - service: persistent_notification.create
        data:
          title: "Milight Sync Help"
          message: |
            ## Prerequisites
            
            Your mqtt json light device should be created with topics setup with last topic level being the *ID* you wish to sync as follow:
            - command_topic: Home/Milight/Cmd/*ID*
            - state_topic: Home/Milight/Stts/*ID*
            
            ## Instructions to sync
            
            1. Turn power off to light to sync
            2. Enter the *ID* to sync into the box but don't press enter
            3. Turn on power to light to sync
            4. Press enter in the box as soon the light turns on
            5. Light will blink
            6. Done!
            
  haupdateavailable:
    alias: New Home Assistant version
    sequence:
      - service: persistent_notification.create
        data:
          title: "New Home Assistant version"
          message: |
            New Home Assistant version {{ state_attr('update.ha_update','latest_version') }} is available for download.
            
            You are currently running {{ state_attr('update.ha_update','installed_version') }}.
            
            [**Release notes**](https://home-assistant.io/blog/categories/release-notes/)
            [**Update Home Assistant Core**](http://supremesports.duckdns.org:8123/hassio/update-available/core)
            
  addons_update_available:
    alias: New Add-ons version
    sequence:
      - service: persistent_notification.create
        data:
          title: "New Add-ons version"
          message: >
            The following add-ons have a new version available for download.
            
            
            [**Go to Supervisor**](http://supremesports.duckdns.org:8123/hassio/dashboard)
            
            
            {% for entity_id in states.group.addons.attributes.entity_id %}
              {%- set parts = entity_id.split('.') %}
              {%- if states(entity_id) == 'Update available' or states(entity_id) == 'Major update' %}
                {{-states[parts[0]][parts[1]].attributes.friendly_name}}: {{states[parts[0]][parts[1]].attributes.current}} ==> {{states[parts[0]][parts[1]].attributes.latest}}
                {{- '\n' -}}
              {%- endif %}
            {%- endfor %}
          
  # rain_count:
    # alias: Rain Count
    # sequence:
      # - service: input_boolean.turn_on
        # entity_id: input_boolean.outdoor_rain_trigger
      # - delay: 00:00:01
      # - service: input_boolean.turn_off
        # entity_id: input_boolean.outdoor_rain_trigger
        
  gardenirrigation_start30m:
    alias: Garden Irrigation Forced 30m
    sequence:
      - service: script.turn_off
        entity_id: script.gardenirrigation_start1h
      - service: switch.turn_on
        entity_id: switch.garden_irrigation
      - service: input_boolean.turn_off
        entity_id: input_boolean.gardenirrigation_start1h
      - delay: 00:30:00
      - service: script.turn_on
        entity_id: script.gardenirrigation_cancel
  gardenirrigation_start1h:
    alias: Garden Irrigation Forced 1h
    sequence:
      - service: script.turn_off
        entity_id: script.gardenirrigation_start30m
      - service: switch.turn_on
        entity_id: switch.garden_irrigation
      - service: input_boolean.turn_off
        entity_id: input_boolean.gardenirrigation_start30m
      - delay: 01:00:00
      - service: script.turn_on
        entity_id: script.gardenirrigation_cancel
  gardenirrigation_cancel:
    alias: Garden Irrigation Forced Cancel
    sequence:
      - service: script.turn_off
        entity_id: script.gardenirrigation_start30m
      - service: script.turn_off
        entity_id: script.gardenirrigation_start1h
      - service: input_boolean.turn_off
        entity_id: input_boolean.gardenirrigation_start30m
      - service: input_boolean.turn_off
        entity_id: input_boolean.gardenirrigation_start1h
      - delay: 00:00:02
      - service: input_boolean.turn_off
        entity_id: input_boolean.gardenirrigation_cancel
        
  pondfiller_start30m:
    alias: Pond Filler Forced 30m
    sequence:
      - service: switch.turn_on
        entity_id: switch.pond_filler_valve
      - service: script.turn_off
        entity_id: script.pondfiller_start1h
      - service: script.turn_off
        entity_id: script.pondfiller_start2h
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start1h
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start2h
      - delay: 00:30:00
      - service: script.turn_on
        entity_id: script.pondfiller_cancel
  pondfiller_start1h:
    alias: Pond Filler Forced 1h
    sequence:
      - service: switch.turn_on
        entity_id: switch.pond_filler_valve
      - service: script.turn_off
        entity_id: script.pondfiller_start30m
      - service: script.turn_off
        entity_id: script.pondfiller_start2h
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start30m
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start2h
      - delay: 01:00:00
      - service: script.turn_on
        entity_id: script.pondfiller_cancel
  pondfiller_start2h:
    alias: Pond Filler Forced 2h
    sequence:
      - service: switch.turn_on
        entity_id: switch.pond_filler_valve
      - service: script.turn_off
        entity_id: script.pondfiller_start30m
      - service: script.turn_off
        entity_id: script.pondfiller_start1h
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start30m
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start1h
      - delay: 02:00:00
      - service: script.turn_on
        entity_id: script.pondfiller_cancel
  pondfiller_cancel:
    alias: Pond Filler Forced Cancel
    sequence:
      - service: script.turn_off
        entity_id: script.pondfiller_start30m
      - service: script.turn_off
        entity_id: script.pondfiller_start1h
      - service: script.turn_off
        entity_id: script.pondfiller_start2h
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start30m
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start1h
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_start2h
      - delay: 00:00:02
      - service: input_boolean.turn_off
        entity_id: input_boolean.pondfiller_cancel
        
  lights_doors_alert_pause30m:
    alias: Lights & Doors Pause 30m
    sequence:
      - delay: 00:30:00
      - service: input_boolean.turn_off
        entity_id: input_boolean.lights_doors_alerts_pause_30min
        
  update_entities:
    alias: Update entities
    sequence:
      - service: button.press
        entity_id: button.jgau_pc_publishallsensors
      - delay: 00:00:02
      - service: python_script.issues
      - service: python_script.count

  ring_jean:
    alias: Ring Jean
    sequence:
      - service: input_button.press
        entity_id: input_button.ring_jean