###################################################
# AUTOMATIONS - POND                              #
###################################################

  #Spring mode, runs pump all day, stop 4h, run 4h, stop 4h, run 12h
  #Summer mode, runs pump based on day of week (runs longer on fridays/saturdays)
  #Autumn mode, pump not running on peak hours
  #If temperature below 5Â°C, run pump
  #Pond water level has to be above low level since 2 minutes
  - alias: Pond Waterfall Pump Control
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/5'
      - platform: state
        entity_id: input_select.pondwaterfallpump_mode
    action:
      data:
        entity_id: "pond_waterfall_pump"
      service_template: >
        {% set curHour = now().hour %}
        {% set curWeekday = now().weekday() %}
        {% set output = false %}
        
        {% if is_state('input_select.pondwaterfallpump_mode', '24/7') %}
          {% set output = true %}
        {% elif is_state('input_select.pondwaterfallpump_mode', 'Spring') %}
          {% if curHour >= 8 and curHour < 20 %}
            {% set output = true %}
          {% elif curHour >= 0 and curHour < 4 %}
            {% set output = true %}
          {% endif %}
        {% elif is_state('input_select.pondwaterfallpump_mode', 'Summer') %}
          {% if curWeekday in (0,1,2,3,6) %}
            {% if curHour >= 6 and curHour < 21 %}
              {% set output = true %}
            {% elif curHour >= 0 and curHour < 3 %}
              {% set output = true %}
            {% endif %}
          {% else %}
            {% if curHour >= 6 and curHour < 23 %}
              {% set output = true %}
            {% elif curHour >= 1 and curHour < 4 %}
              {% set output = true %}
            {% endif %}
          {% endif %}
        {% elif is_state('input_select.pondwaterfallpump_mode', 'Autumn') %}
          {% if curHour >= 2 and curHour < 6 %}
            {% set output = true %}
          {% elif curHour >= 9 and curHour < 11 %}
            {% set output = true %}
          {% elif curHour >= 14 and curHour < 16 %}
            {% set output = true %}
          {% elif curHour >= 21 and curHour < 23 %}
            {% set output = true %}
          {% endif %}
        {% endif %}
        
        {% if not is_state('input_select.pondwaterfallpump_mode', 'Winter/Off') and is_state('binary_sensor.antifreeze_active', 'on') %}
          {% set output = true %}
        {% endif %}
        
        {% set lastLevel = as_timestamp(now()) - as_timestamp(states.binary_sensor.pond_level_low.last_changed, default=0) %}
        {% if is_state('binary_sensor.pond_level_low', 'off') and lastLevel >= 120 and false %}
          {% set output = false %}
        {% endif %}
        
        {% if output %}
          script.switch_turn_on
        {% else %}
          script.switch_turn_off
        {% endif %}

######## POND REFILL ########

  #Pond water level has to be below high level since 'delayStart' minutes
  #Pond pump mode shall not be in Winter mode
  #Filler valve can't operate more than 'maxDailyTime' per 24h period
    #Unless it is set to 0 or -1, then there's unlimited daily time
  #Filler will start 'delayStart' minutes after level been below the high level and stop 'delayStop' minutes after it has been reached and maintained
    #If you want to stop it, simply turn off filler valve (high level sensor MUST be ON otherwise filler valve will turn on again)
  - alias: Pond Filler Control
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/5'
      - platform: state
        entity_id: input_boolean.pondfiller_cancel
        to: 'on'
    condition:
      condition: or
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: 'script.pondfiller_start30m'
              state: 'off'
            - condition: state
              entity_id: 'script.pondfiller_start1h'
              state: 'off'
            - condition: state
              entity_id: 'script.pondfiller_start2h'
              state: 'off'
        - condition: state
          entity_id: 'input_select.pondfiller_mode'
          state: 'Winter/Off'
    action:
      - service_template: >
          {% if is_state('input_select.pondfiller_mode', 'Winter/Off') and (is_state('input_boolean.pondfiller_start30m', 'on') or is_state('input_boolean.pondfiller_start1h', 'on') or is_state('input_boolean.pondfiller_start2h', 'on')) %}
            script.pondfiller_cancel
          {% else %}
            script.none
          {% endif %}
      - data:
          entity_id: "pond_filler_valve"
        service_template: >
          {% set lastLevel = (as_timestamp(now()) - as_timestamp(states.binary_sensor.pond_level_high.last_changed, as_timestamp(now())))/60 %}
          {% set lastStateOff = is_state('binary_sensor.pond_level_high', 'off') %}
          {% set lastSwitch = is_state('switch.pond_filler_valve', 'on') %}
          {% set lastDay = states('sensor.pond_filler_timer')|float(1000) %}
          {% set pondRunning = is_state('input_boolean.pond_running', 'on') %}
          {% set delayStart = states('input_number.pond_filler_start')|int(0) %}
          {% set delayStop = states('input_number.pond_filler_stop')|int(0) %}
          
          {% if states('input_number.pond_filler_runtime')|int(60) <= 0 %}
            {% set maxDailyTime = 25 %}
          {% else %}
            {% set maxDailyTime = states('input_number.pond_filler_runtime')|int(0)/60 %}
          {% endif %}
          
          {% set output = false %}
          
          {% if lastSwitch %}
            {% if lastStateOff %}
              {% set output = true %}
            {% elif lastLevel <= delayStop %}
              {% set output = true %}
            {% endif %}
          {% elif lastStateOff and lastLevel >= delayStart and lastDay <= ((maxDailyTime*60-delayStop)/60) %}
            {% set output = true %}
          {% endif %}
          
          {% if lastDay >= maxDailyTime %}
            {% set output = false %}
          {% elif is_state('input_select.pondfiller_mode', 'Winter/Off') or is_state('input_select.pondwaterfallpump_mode', 'Winter/Off') %}
            {% set output = false %}
          {% elif is_state('binary_sensor.pond_level_high', 'unavailable') %}
            {% set output = false %}
          {% elif is_state('group.irrigation', 'on') %}
            {% set output = false %}
          {% endif %}
          
          {% if output %}
            script.switch_turn_on
          {% else %}
            script.switch_turn_off
          {% endif %}

  - alias: Pond Filler Force Start
    mode: restart
    trigger:
      - platform: state
        entity_id: input_boolean.pondfiller_start30m
        to: 'on'
      - platform: state
        entity_id: input_boolean.pondfiller_start1h
        to: 'on'
      - platform: state
        entity_id: input_boolean.pondfiller_start2h
        to: 'on'
      - platform: state
        entity_id: input_boolean.pondfiller_cancel
        to: 'on'
    action:
      #- service_template: script.{% if '30m' in trigger.to_state.entity_id %}pondfiller_start30m{% elif '1h' in trigger.to_state.entity_id %}pondfiller_start1h{% elif '2h' in trigger.to_state.entity_id %}pondfiller_start2h{% else %}pondfiller_cancel{% endif %}
      - service_template: >
          {% if is_state('input_select.pondfiller_mode', 'Winter/Off') %}
            script.pondfiller_cancel
          {% elif trigger.to_state.entity_id == 'input_boolean.pondfiller_start30m' %}
            script.pondfiller_start30m
          {% elif trigger.to_state.entity_id == 'input_boolean.pondfiller_start1h' %}
            script.pondfiller_start1h
          {% elif trigger.to_state.entity_id == 'input_boolean.pondfiller_start2h' %}
            script.pondfiller_start2h
          {% else %}
            script.pondfiller_cancel
          {% endif %}