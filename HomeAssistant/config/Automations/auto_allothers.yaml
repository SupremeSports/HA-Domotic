###################################################
# AUTOMATIONS                                     #
###################################################

##CONTROL BOXES
  - alias: Control Boxes
    mode: restart
    trigger:
      - platform: state
        entity_id:
          - input_boolean.control_room_control_reset
          - input_boolean.pond_control_reset
          - input_boolean.pool_control_reset
          - input_boolean.weather_control_reset
          - input_boolean.garage_main_control_reset
          - input_boolean.garage_slave_control_reset
          - input_boolean.shed_control_reset
          - input_boolean.glasshouse_control_reset
          - input_boolean.well_control_reset
          - input_boolean.pool_toilet_control_reset
          - input_boolean.transmitter_box_control_reset
        to: 'on'
    condition:
      condition: state
      entity_id: script.control_boxes
      state: 'off'
    action:
      - service: script.control_boxes
        data_template:
          topic_prefix: 
            "{% if 'weather' in trigger.to_state.entity_id %}Outside/WStation
            {% elif 'pond_control' in trigger.to_state.entity_id %}Pond/Control
            {% elif 'pool_control' in trigger.to_state.entity_id %}Pool/Control
            {% elif 'control_room' in trigger.to_state.entity_id %}Home/Control
            {% elif 'garage_main' in trigger.to_state.entity_id %}Garage/Control
            {% elif 'garage_slave' in trigger.to_state.entity_id %}Garage/Slave
            {% elif 'shed_control' in trigger.to_state.entity_id %}Shed/Control
            {% elif 'glasshouse' in trigger.to_state.entity_id %}Glass/Control
            {% elif 'well' in trigger.to_state.entity_id %}Well/Control
            {% elif 'pool_toilet' in trigger.to_state.entity_id %}ExtToilet/Control
            {% elif 'transmitter' in trigger.to_state.entity_id %}Home/Transmitter
            {%else%}none
            {%endif%}"

  #Keeps the devices MQTT active, otherwise device will autoreset after 60s
  - alias: MQTT Keep Alive Reset
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: "/7"
    action:
      # - service: mqtt.publish
      #   data_template:
      #     topic: "Home/Door/Back/Cmd"
      #     payload_template: '{"reset": "OFF"}'
      - service: mqtt.publish
        data_template:
          topic: "Home/Global/UpdateMQTT"
          payload_template: '{"reset": "ON"}'

##CREATE GROUPS
  - alias: Create Groups
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: group.set
        data:
          object_id: pool_sensors
          #entities: >-
            # {%- for s in states
            #   if ('pool' in s.entity_id) %}
            #   {{s.entity_id}}{% if not loop.last %}, {% endif %}
            # {%- endfor %}
          entities: >-
            {%- for s in states
              if ('pool' in s.entity_id)
              and not ('gate' in s.entity_id)
              and not ('shed_pool_light' in s.entity_id)
              and not ('group.pool_sensor' in s.entity_id) %}
              {{- s.entity_id }},
            {% endfor %}
            {{- states.binary_sensor.gardenirrigation_status.entity_id }},
            {{ states.switch.garden_irrigation.entity_id }}
      - service: group.set
        data:
          object_id: pond_sensors
          entities: >-
            {%- for s in states
              if ('pond' in s.entity_id) %}
              {{ s.entity_id }}{% if not loop.last %},{% endif %}
            {%- endfor %}
      # - service: group.set
        # data:
          # object_id: weather_station_sensors
          # entities: >-
            # {% for s in states.sensor 
              # if s.attributes.attribution is defined 
              # and s.attributes.attribution|string in ('Data provided by Environment Canada') %}
              # {{- s.entity_id }}{% if not loop.last %},{% endif %}
            # {% endfor %}

#UTILITY
  - alias: Utility Tier Change Date
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.ted5000_utility_current_tier
        above: 1
    condition:
      alias: "Tier not already changed this month"
      condition: template
      value_template: "{{ state_attr('input_datetime.utility_tier_change_date', 'month') != now().month }}"
    action:
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ states('input_datetime.utility_tier_change_date_prev3') }}"
        entity_id: input_datetime.utility_tier_change_date_prev4
      - alias: "Wait until datetime is copied"
        wait_template: "{{ states('input_datetime.utility_tier_change_date_prev4') == states('input_datetime.utility_tier_change_date_prev3') }}"
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ states('input_datetime.utility_tier_change_date_prev2') }}"
        entity_id: input_datetime.utility_tier_change_date_prev3
      - alias: "Wait until datetime is copied"
        wait_template: "{{ states('input_datetime.utility_tier_change_date_prev3') == states('input_datetime.utility_tier_change_date_prev2') }}"
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ states('input_datetime.utility_tier_change_date_prev1') }}"
        entity_id: input_datetime.utility_tier_change_date_prev2
      - alias: "Wait until datetime is copied"
        wait_template: "{{ states('input_datetime.utility_tier_change_date_prev2') == states('input_datetime.utility_tier_change_date_prev1') }}"
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ states('input_datetime.utility_tier_change_date') }}"
        entity_id: input_datetime.utility_tier_change_date_prev1
      - alias: "Wait until datetime is copied"
        wait_template: "{{ states('input_datetime.utility_tier_change_date_prev1') == states('input_datetime.utility_tier_change_date') }}"
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.utility_tier_change_date
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

##OTHERS
  #HVAC and Heaters
  - alias: Living Room HVAC Tilt
    mode: restart
    trigger:
      - platform: state
        entity_id:  input_boolean.living_room_hvac_tilt
        to: 'on'
    action:
      - service: mqtt.publish
        data_template:
          topic: "Home/Living/Hvac/Tilt/Cmd"
          payload_template: >-
            {{ "On" }}
      - delay: 
          milliseconds: 500
      - service: input_boolean.turn_off
        entity_id: input_boolean.living_room_hvac_tilt
        
  - alias: Living Room HVAC Off
    mode: restart
    trigger:
      # - platform: time
        # at: '00:01:00'
      - platform: state
        entity_id: sensor.times
        attribute: short
        to: '00:15'
    condition:
      - condition: state
        entity_id: climate.living_room_hvac
        state: 'cool'
    action:
      - service: climate.turn_off
        entity_id: climate.living_room_hvac

  #Doorchimes
  - alias: Doorchime Trigger
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.house_fd_bell
        from: 'off'
        to: 'on'
      - platform: state
        entity_id: binary_sensor.house_sd_bell
        from: 'off'
        to: 'on'
      - platform: state
        entity_id: binary_sensor.house_bd_bell
        from: 'off'
        to: 'on'
      - platform: state
        entity_id: binary_sensor.garage_fd_bell
        from: 'off'
        to: 'on'
      - platform: state
        entity_id: input_boolean.test_doorbell
        from: 'off'
        to: 'on'
    condition:
      - condition: template
        value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.doorchime_trigger.attributes.last_triggered, as_timestamp(now())) > 2 }}'
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.doorbell_state
      - service: mqtt.publish
        data_template:
          topic: "Home/Chime/Trigger"
          #IMPORTANT - Always send all 3 infos for correct assignement of tune and volume (state, sound, volume[s])
          payload: >
            {% set trig_entity = trigger.to_state.entity_id %}
            {% set volume_tf = states('input_number.doorchime_tf_volume')|int(4) %}
            {% set volume_bf = states('input_number.doorchime_bf_volume')|int(4) %}
            {% set volume_gf = states('input_number.doorchime_gf_volume')|int(5) %}
            
            {% if 'fd' in trig_entity or 'test' in trig_entity %}
              {% set sound_id = states.input_select.doorchime_fd_sound.attributes.options.index(states.input_select.doorchime_fd_sound.state) %}
            {% elif 'sd' in trig_entity %}
              {% set sound_id = states.input_select.doorchime_sd_sound.attributes.options.index(states.input_select.doorchime_sd_sound.state) %}
            {% elif 'bd' in trig_entity %}
              {% set sound_id = states.input_select.doorchime_bd_sound.attributes.options.index(states.input_select.doorchime_bd_sound.state) %}
            {% elif 'garage' in trig_entity %}
              {% set sound_id = states.input_select.doorchime_gd_sound.attributes.options.index(states.input_select.doorchime_gd_sound.state) %}
            {% else %}
              {% set sound_id = -1 %}
            {% endif %}
              
            {"state":"ON","sound":"{{sound_id}}","volume_tf":"{{volume_tf}}","volume_bf":"{{volume_bf}}","volume_gf":"{{volume_gf}}"}
      - delay:
          seconds: 2
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.doorbell_state
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.test_doorbell

  - alias: Shut Soldering Station Warning
    mode: restart
    trigger:
      - platform: template
        value_template: "{{ is_state('sensor.soldering_station_status','On') }}"
        for:
          minutes: "{{ states('input_number.soldering_station')|int(60) - 5 }}"
    action:
      #- service: notify.sms_jean
      - service: notify.mobile_app_iphone_de_jean
        data:
          title: "Soldering Station - Warning"
          message: "Soldering Station will turn off in 5 minutes"
          
  - alias: Shut Soldering Station Shutdown
    mode: restart
    trigger:
      - platform: template
        value_template: "{{ is_state('sensor.soldering_station_status','On') }}"
        for:
          minutes: "{{ states('input_number.soldering_station')|int(60) }}"
      - platform: time_pattern
        minutes: '/5'
    condition:
      condition: and
      conditions: 
        - condition: state
          entity_id: sensor.soldering_station_status
          state: 'On'
        - condition: template
          value_template: '{{ ((as_timestamp(now()) - as_timestamp(states.sensor.soldering_station_status.last_changed, as_timestamp(now()))) / 60) >= (states.input_number.soldering_station.state|int(60)) }}'
    action:
      - service: switch.turn_off
        entity_id: switch.soldering_station
      #- service: notify.sms_jean
      - service: notify.mobile_app_iphone_de_jean
        data:
          title: "Soldering Station OFF"
          message: "Soldering Station has been turned off"

  - alias: 'ISS Location Update'
    trigger:
      - platform: state
        entity_id: sensor.iss_coordinates
    action:
      service: mqtt.publish
      data_template:
        topic: location/iss
        payload_template: >
          {% if states.sensor.iss_coordinates.state is defined and states.sensor.iss_coordinates.attributes.iss_position is defined %}
            {% set longitude = states.sensor.iss_coordinates.attributes.iss_position.longitude | float(0) %}
            {% set latitude = states.sensor.iss_coordinates.attributes.iss_position.latitude | float(0) %}
          {% else %}
            {% set longitude = 0 %}
            {% set latitude = 0 %}
          {% endif %}
          {"longitude": "{{ longitude }}","latitude": "{{ latitude }}"}
        retain: true
        
  # - alias: 'SpaceX Integration Reload'
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.spacex_status
  #       to: 'off'
  #       for:
  #         minutes: 1
  #     - platform: time_pattern
  #       minutes: '/5'
  #   condition:
  #     condition: and
  #     conditions: 
  #       - condition: state
  #         entity_id: input_boolean.running_hass
  #         state: 'on'
  #       - condition: state
  #         entity_id: binary_sensor.spacex_status
  #         state: 'off'
  #   action:
  #     - service: rest_command.reload_spacex
  #       data: {}

  - alias: JGAU-PC Mute Sound
    mode: single
    trigger:
      - platform: template
        value_template: >
          {{  (as_timestamp(now()) - as_timestamp(states('sensor.jgau_pc_lastactive'),as_timestamp(now())))|int(0) >= 300 and 
              (as_timestamp(now()) - as_timestamp(states.sensor.jgau_pc_audio_audio_sessions.last_changed, as_timestamp(now()))) > 60 and
              states('sensor.jgau_pc_audio_audio_sessions')|int(0) == 0 }}
    action:
      - service: button.press
        entity_id: button.jgau_pc_mediamute
      - delay: 
          seconds: 1
      - service: button.press
        entity_id: button.jgau_pc_monitorsleep
        
  # - alias: Cody Presence Update
    # mode: queued
    # trigger:
      # - platform: homeassistant
        # event: start
      # - platform: state
        # entity_id: sensor.cody
    # condition: []
    # action:
      # - service: mqtt.publish
        # data:
          # topic: 'presence/cody'
          # payload_template: |
            # {{ states.sensor.cody.state == "Home" }} 
          # retain: "true"
      # - service: device_tracker.see
        # data:
          # dev_id: "life360_cody"
          # location_name: >
            # {% if trigger.to_state.state == 'Home' %}
              # home
            # {% elif trigger.to_state.state == 'Away' %}
              # not_home
            # {% else %}
               # unknown
            # {% endif %}
          # source_type: "router"
          
  - alias: Cody Presence Update
    trigger:
      - platform: state
        entity_id: sensor.cody
      - platform: time_pattern
        minutes: '/5'
      - platform: homeassistant
        event: start
    action:
      - service: device_tracker.see
        data:
          dev_id: life360_cody
          location_name: >
            {{states('sensor.cody')}}

##OTHERS
  - alias: Random Number Generator
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: '/5'
      - platform: homeassistant
        event: start
    action:
      service: input_number.set_value
      target:
        entity_id: input_number.random_number_generator
      data:
        value: >
          {% set random1 = range(100, 999) | random %}
          {% set random2 = range(100, 999) | random %}
          {% set random3 = range(1, 9) | random %}
          {% set random4 = range(11, 99) | random %}
          {% set random5 = range(100, 999) | random %}
          
          {% set seed = random1*1000 + random2 %}
          {% set random = (states('sensor.times')|replace(':',''))|int(1)+seed %}
          
          {% if random < 10 %}
            {% set random = random*100000 + 10*random5 %}
          {% elif random < 100 %}
            {% set random = random*10000 + 5*random5 %}
          {% elif random < 1000 %}
            {% set random = random*1000 + random5 %}
          {% elif random < 10000 %}
            {% set random = random*100 + random4 %}
          {% elif random < 100000 %}
            {% set random = random*10 + random3 %}
          {% elif random > 999999 %}
            {% set random = random/10 %}
          {% endif %}
          
          {{ random | round(0) }}

  # - alias: SpeedTest Run
    # mode: restart
    # trigger:
      # - platform: time_pattern
        # hours: '*'
      # - platform: homeassistant
        # event: start
    # action:
      # service: hassio.addon_start
      # data:
        # addon: 6b87c29e_speedtest_addon
        
  - alias: Run SpeedTest
    mode: restart
    trigger:
      - platform: template
        value_template: >
          {% set last_change = as_timestamp(now()) - as_timestamp(states.sensor.speedtest_download.last_changed, now()) >= 300 %}
          {% set error = not states('sensor.speedtest_download')|is_number %}
          {% set min = state_attr('sensor.times','minute')|int(-1) % 5 == 0 %}
          
          {{ last_change and error and min }}
    action:
      - service: switch.turn_on
        data:
          entity_id: switch.jgau_pc_runspeedtest
      - delay: 
          seconds: 5
      - service: switch.turn_off
        data:
          entity_id: switch.jgau_pc_runspeedtest