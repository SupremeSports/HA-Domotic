###################################################
# AUTOMATIONS - POOL                              #
###################################################

  #Spring mode, runs pump all day, stop 4h, run 4h, stop 4h, run 12h
  #Summer mode, runs pump based on day of week (runs longer on fridays/saturdays)
  #Autumn mode, pump not running on peak hours
  #If outisde temperature drops below 5°C, run pump
  #Pool water level has to be above low level since 2 minutes
  - alias: Pool Pump Control
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/5'
      - platform: state
        entity_id: input_select.poolpump_mode
    action:
      data:
        entity_id: "pool_pump"
      service_template: >
        {% set curHour = now().hour %}
        {% set curWeekday = now().weekday() %}
        {% set input_select = states('input_select.poolpump_mode') %}
        {% set antifreeze = is_state('binary_sensor.antifreeze_active', 'on')  %}
        
        {% set output = false %}
        
        {% if input_select == '24/7' %}
          {% set output = true %}
        {% elif input_select == 'Spring' %}
          {% if curHour >= 8 and curHour < 20 %}
            {% set output = true %}
          {% elif curHour >= 0 and curHour < 4 %}
            {% set output = true %}
          {% endif %}
        {% elif input_select == 'Summer' %}
          {% if curWeekday in (0,1,2,3,6) %}
            {% if curHour >= 8 and curHour < 21 %}
              {% set output = true %}
            {% elif curHour >= 0 and curHour < 4 %}
              {% set output = true %}
            {% endif %}
          {% else %}
            {% if curHour >= 8 and curHour < 21 %}
              {% set output = true %}
            {% elif curHour >= 0 and curHour < 4 %}
              {% set output = true %}
            {% endif %}
          {% endif %}
        {% elif input_select == 'Autumn' %}
          {% if curHour >= 2 and curHour < 6 %}
            {% set output = true %}
          {% elif curHour >= 9 and curHour < 11 %}
            {% set output = true %}
          {% elif curHour >= 14 and curHour < 16 %}
            {% set output = true %}
          {% elif curHour >= 21 and curHour < 23 %}
            {% set output = true %}
          {% endif %}
        {% endif %}
        
        {% if input_select != 'Winter/Off' and antifreeze %}
          {% set output = true %}
        {% endif %}
        
        {% set lastLevel = as_timestamp(now()) - as_timestamp(states.binary_sensor.pool_level_low.last_changed, default=0) %}
        {% if is_state('binary_sensor.pool_level_low', 'off') and lastLevel >= 120 %}
          {% set output = false %}
        {% endif %}
        
        {% if is_state('input_boolean.poolpump_force_off', 'on') %}
          {% set output = false %}
        {% endif %}
        
        {% if output %}
          script.switch_turn_on
        {% else %}
          script.switch_turn_off
        {% endif %}
        
######## POOL HEATER ########

  #Auto mode, runs heater whenever temperature is below setpoint + 2°C
  - alias: Pool Heater Control
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/5'
      - platform: state
        entity_id: input_select.poolheat_mode
    action:
      data:
        entity_id: "pool_heater"
      service_template: >
        {% set curHour = now().hour %}
        {% set curWeekday = now().weekday() %}
        {% set input_select = states('input_select.poolheat_mode') %}
        
        {% set output = false %}
        
        {% if input_select == '24/7' %}
          {% set output = true %}
        {% elif input_select == 'Auto' %}
          {% set output = true %}
        {% endif %}
        
        {% if output %}
          script.switch_turn_on
        {% else %}
          script.switch_turn_off
        {% endif %}
        
######## POOL REFILL ########

  #Pool water level has to be below high level since 'delayStart' minutes
  #Pool pump mode shall not be in Winter mode
  #Filler valve can't operate more than 'maxDailyTime' per 24h period
    #Unless it is set to 0 or -1, then there's unlimited daily time
  #Filler will start 'delayStart' minutes after level been below the high level and stop after it has been reached and maintained for 'delayStop' minutes 
    #If you want to stop it, simply turn off filler valve (high level sensor MUST be ON otherwise filler valve will turn on again)
  - alias: Pool Filler Control
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/5'
    condition:
      - condition: template
        value_template: "{{ not is_state('input_select.poolfiller_mode', 'Manual') }}"
    action:
      data:
        entity_id: "pool_filler_valve"
      service_template: >
        {% set lastLevel = (as_timestamp(now()) - as_timestamp(states.binary_sensor.pool_level_high.last_changed, default=0))/60 %}
        {% set lastStateOff = is_state('binary_sensor.pool_level_high', 'off') %}
        {% set lastSwitch = is_state('switch.pool_filler_valve', 'on') %}
        {% set lastDay = states('sensor.pool_filler_timer')|float(1000) %}
        {% set poolRunning = is_state('input_boolean.pool_running', 'on') %}
        {% set delayStart = states('input_number.pool_filler_start')|int(0) %}
        {% set delayStop = states('input_number.pool_filler_stop')|int(0) %}
        
        {% if states('input_number.pool_filler_runtime')|int(60) <= 0 %}
          {% set maxDailyTime = 25 %}
        {% else %}
          {% set maxDailyTime = states('input_number.pool_filler_runtime')|int(0)/60 %}
        {% endif %}
        
        {% set output = false %}
        
        {% if lastSwitch %}
          {% if lastStateOff %}
            {% set output = true %}
          {% elif lastLevel <= delayStop %}
            {% set output = true %}
          {% endif %}
        {% elif lastStateOff and lastLevel >= delayStart and lastDay <= ((maxDailyTime*60-delayStop)/60) %}
          {% set output = true %}
        {% endif %}
        
        {% if lastDay >= maxDailyTime %}
          {% set output = false %}
        {% elif is_state('input_select.poolfiller_mode', 'Winter/Off') or is_state('input_select.poolpump_mode', 'Winter/Off') %}
          {% set output = false %}
        {% elif is_state('binary_sensor.pool_level_high', 'unavailable') %}
          {% set output = false %}
        {% elif is_state('group.irrigation', 'on') %}
          {% set output = false %}
        {% endif %}
                
        {% if not poolRunning %}
          {% set output = false %}
        {% endif %}
        
        {% if output %}
          script.switch_turn_on
        {% else %}
          script.switch_turn_off
        {% endif %}
        
######## POOL CLOCK ########

  #Devices to turn ON when cover is removed
  - alias: Pool Auto Controls
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/5'
    action:
      - data:
          entity_id: "pool_clock"
        service_template: >
          {% set cover_removed = is_state('binary_sensor.pool_cover','on') %}
          {% set poolRunning = is_state('input_boolean.pool_running','on') %}
          
          {% set output = cover_removed and poolRunning %}
          
          {% if output %}
            script.light_turn_on
          {% else %}
            script.light_turn_off
          {% endif %}
      - data:
          entity_id: "pool_water_rgb"
        service_template: >
          {% set sun_down = is_state('sun.sun','below_horizon') %}
          {% set cover_removed = is_state('binary_sensor.pool_cover','on') %}
          {% set poolRunning = is_state('input_boolean.pool_running','on') %}
          
          {% set output = sun_down and cover_removed and poolRunning %}
          
          {% if output %}
            script.light_turn_on
          {% else %}
            script.light_turn_off
          {% endif %}
        
  #Input Text Changes Trigger
  - alias: Pool Clock Top Text Change
    mode: restart
    trigger:
      platform: state
      entity_id: input_text.pool_clock_text_top
    action:
    - service: mqtt.publish
      data_template:
        topic: "Pool/Clock/Cmd"
        payload: '{"uptxt":"{{ trigger.to_state.state }}"}'
        qos: 0
        retain: false
        
  - alias: Pool Clock Bottom Text Change
    mode: restart
    trigger:
      platform: state
      entity_id: input_text.pool_clock_text_bottom
    action:
    - service: mqtt.publish
      data_template:
        topic: "Pool/Clock/Cmd"
        payload: '{"dntxt":"{{ trigger.to_state.state }}"}'
        qos: 0
        retain: false

  - alias: "Pool Clock Scroll Speed"
    mode: restart
    trigger:
      platform: state
      entity_id: input_number.pool_clock_scroll_speed
    action:
    - service: mqtt.publish
      data_template:
        topic: "Pool/Clock/Cmd"
        payload: '{"scroll":{{ trigger.to_state.state | int(0) }}}'
        qos: 0
        retain: false
        
  - alias: "Pool Clock Transistion Speed"
    mode: restart
    trigger:
      platform: state
      entity_id: input_number.pool_clock_trans_speed
    action:
    - service: mqtt.publish
      data_template:
        topic: "Pool/Clock/LED/Cmd"
        payload: '{"transition":{{ trigger.to_state.state | int(0) }}}'
        qos: 0
        retain: false

#Publish data to device every minute or when a device requests an update (boot up or invalid data detected (by the device))
  - alias: Publish Pool Clock Data
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: '/1'
      - platform: mqtt
        topic: "Home/Global/Time/Request"
        payload: 'ON'
        encoding: 'utf-8'
    action:
      - service: mqtt.publish
        data_template:
          topic: "Pool/Clock/Cmd"
          payload_template: '{"wtemp":"{{states.sensor.pool_temperature.state}}","wph":"{{states.sensor.pool_ph.state}}","otemp":"{{states.sensor.outdoor_temperature.state}}","ohum":"{{states.sensor.outdoor_humidity.state}}"}'
          qos: 0
          retain: false

#UNKNOWN USAGE
  # - alias: Publish Pool Pressure Data
    # mode: restart
    # trigger:
      # - platform: time_pattern
        # minutes: '/1'
      # - platform: state
        # entity_id: sensor.pool_pressure
      # - platform: state
        # entity_id: sensor.pool_fd_status
    # action:
      # - service: mqtt.publish
        # data_template:
          # topic: "Pool/Pressure/Cmd"
          # # payload_template: >
            # # {% if is_state('sensor.pool_fd_status', 'Unlocked') or is_state('sensor.pool_fd_status', 'Ok') %}
              # # {"state":"OFF", "wpsi":"{{states.sensor.pool_pressure.state}}"}
            # # {% else %}
              # # {"state":"ON", "wpsi":"{{states.sensor.pool_pressure.state}}"}
            # # {% endif %}
          # payload_template: >
            # {% if is_state('sensor.pool_fd_status', 'Unlocked') or is_state('sensor.pool_fd_status', 'Ok') %}
              # {"state":"OFF", "wpsi":"{{states('sensor.pool_pressure')}}"}
            # {% else %}
              # {"state":"ON", "wpsi":"{{states('sensor.pool_pressure')}}"}
            # {% endif %}
          # qos: 0
          # retain: false
          