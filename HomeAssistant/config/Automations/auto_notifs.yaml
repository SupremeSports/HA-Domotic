###################################################
# AUTOMATIONS - NOTIFICATIONS                     #
###################################################

  - alias: HA Update Notification
    mode: restart
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: binary_sensor.ha_update_available
        from: 'off'
        to: 'on'
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.ha_update_available
          state: 'on'
        - condition: state
          entity_id: binary_sensor.updater
          state: 'on'
    action:
      - service: script.haupdateavailable

#   - alias: Publish Florida Days
#     mode: restart
#     trigger:
#       - platform: time
#         at: '09:00:00'
#     action:
#       - service: notify.ios_notify_parents
#         data:
#           title: "Voyage en Floride :D"
#           message: "Décollage dans: {{ states.sensor.voyage_floride_counter.attributes.days }} {% if states.sensor.voyage_floride_counter.attributes.days > 1 %}jours{% else %}jour{% endif %}!"
#       - service: notify.ios_notify_parents
#         data:
#           message: clear_badge
          
  - alias: Publish Postal Arrival
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.postal_status
        from: 'No Mail'
        to: 'New Mail'
        for: '00:00:30'
    # condition:
    #   - condition: template
    #     value_template: "{{ is_state_attr('sensor.postal_status', 'source', 'sender') }}"
    action:
      - service: input_datetime.set_datetime
        data_template:
          entity_id: input_datetime.last_postal_arrival
          time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S", true)) }}'
          date: '{{ (as_timestamp(now()) | timestamp_custom("%Y-%m-%d", true)) }}'
      - service: notify.ios_notify_parents
        data:
          title: "Postal Status Update"
          message: |
            New Mail has been delivered
            id: {{ states.sensor.postal_status.attributes.id }}
            {% if state_attr('sensor.postal_status', 'battery')|int <= 50 %}Critical battery level{% elif state_attr('sensor.postal_status', 'battery')|int <= 90 %}Low battery level{% endif %}
          
  - alias: Publish Postal Removal
    mode: restart
    trigger:
      - platform: state
        entity_id: sensor.postal_status
        from: 'New Mail'
        to: 'No Mail'
        for: '00:00:30'
    # condition:
    #   - condition: template
    #     value_template: "{{ is_state_attr('sensor.postal_status', 'source', 'sender') }}"
    action:
      - service: input_datetime.set_datetime
        data_template:
          entity_id: input_datetime.last_postal_removal
          time: '{{ (as_timestamp(now()) | timestamp_custom("%H:%M:%S", true)) }}'
          date: '{{ (as_timestamp(now()) | timestamp_custom("%Y-%m-%d", true)) }}'
      - service: notify.ios_notify_parents
        data:
          title: "Postal Status Update"
          message: |
            Mail has been removed
            id: {{ states.sensor.postal_status.attributes.id }}
            {% if state_attr('sensor.postal_status', 'battery')|int <= 50 %}Critical battery level{% elif state_attr('sensor.postal_status', 'battery')|int <= 90 %}Low battery level{% endif %}
          
  - alias: Lexus Office Start Reminder
    mode: restart
    trigger:
      - platform: time
        at: '11:45:00'
      - platform: time
        at: '16:45:00'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: device_tracker.life360_jean
          state: 'DO2 Contrôle'
        - condition: numeric_state
          entity_id: sensor.outdoor_temperature
          below: 5
    action:
      - service: notify.sms_jean
        data:
          message: "Start the Lexus"

  # - alias: Publish Persistent
    # mode: restart
    # trigger:
      # - platform: time_pattern
        # minutes: '/59'         
    # action:
      # service: persistent_notification.create
      # data:
        # message: "Your message goes here"
        # title: "Custom subject"

  - alias: Publish Collect Notification
    mode: restart
    trigger:
      # - platform: time
        # at: '7:00:00'
      - platform: time
        at: '18:00:00'
    condition:
      condition: or
      conditions:
        # - condition: state
          # entity_id: sensor.collect_trash_week
          # state: 'Today'
        # - condition: state
          # entity_id: sensor.collect_recycle_week
          # state: 'Today'
        # - condition: state
          # entity_id: sensor.collect_compost_week
          # state: 'Today'
        - condition: state
          entity_id: sensor.collect_trash_week
          state: 'Tomorrow'
        - condition: state
          entity_id: sensor.collect_recycle_week
          state: 'Tomorrow'
        - condition: state
          entity_id: sensor.collect_compost_week
          state: 'Tomorrow'
    action:
      service_template: >
        {% set jean = states('sensor.iphone_de_jean_distance_home')|int < 75 or is_state('device_tracker.life360_jean', 'home') %}
        {% set cindy = states('sensor.iphone_de_cindy_distance_home')|int < 75 or is_state('device_tracker.life360_cindy', 'home') %}
        {% if jean and cindy %}
          notify.sms_notify_all
        {% elif jean %}
          notify.sms_jean
        {% elif cindy %}
          notify.sms_cindy
        {% else %}
          notify.sms_jean
        {% endif %}
      data_template:
        title: "Collect day"
        message: >-
          {% for device in states.sensor if 'collect_' in device.entity_id and '_week' in device.entity_id if device.attributes.tomorrow == 'on' %}
             {%- if loop.first -%}{{'Put '}}{% elif loop.last %}{{' & '}}{% else %}{{', '}}{% endif -%}
             {{ device.attributes['displayName'] }}
          {%- endfor -%}
          {{' out for collection tomorrow'}}
          
  - alias: Printer3D Job Complete
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.octoprint_printing
        from: 'on'
        to: 'off'
    condition:
      - condition: state
        entity_id: binary_sensor.octoprint_printing_error
        state: 'off'
      - condition: numeric_state
        entity_id: sensor.master_bed_raw
        below: 100
    action:
      - service: notify.sms_jean
        data:
          message: "3D Printing Completed"
          
  - alias: Printer3D Job Failed
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.octoprint_printing_error
        from: 'off'
        to: 'on'
    condition:
      - condition: numeric_state
        entity_id: sensor.master_bed_raw
        below: 100
    action:
      - service: notify.sms_jean
        data:
          message: "3D Printing Failed"
          
  - alias: Garage Attic Light ON Repetitive
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: '/10'        
    condition:
      - condition: state
        entity_id: binary_sensor.garage_attic_light
        state: "on"
      - condition: state
        entity_id: sensor.garage_fd_status
        state: "Ok"
    action:
      - service: notify.sms_jean
        data:
          message: "Attic Light Still On"
          
  - alias: Garage Attic Light ON Immediate
    mode: restart
    trigger:
      - platform: state
        entity_id: lock.garage_fd_lock
        from: 'unlocked'
        to: 'locked'
    condition:
      - condition: state
        entity_id: binary_sensor.garage_attic_light
        state: "on"
    action:
      - service: notify.sms_jean
        data:
          message: "Attic Light Remained On"
          
  - alias: Garage Heaters Safety Notif
    mode: restart
    trigger:
      - platform: time_pattern
        minutes: '/5'
      - platform: state
        entity_id: binary_sensor.garage_safety_front_active
        from: 'off'
        to: 'on'
      - platform: state
        entity_id: binary_sensor.garage_safety_rear_active
        from: 'off'
        to: 'on'
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.garage_safety_front_active
          state: "on"
          for:
            seconds: 15
        - condition: state
          entity_id: binary_sensor.garage_safety_rear_active
          state: "on"
          for:
            seconds: 15
        - condition: state
          entity_id: sensor.garage_safety_control_status
          state: "ERROR"
          for:
            minutes: 1
    action:
      - service: notify.sms_jean
        data:
          message: "ALARM - Garage Safety Temperature"
          
#   - alias: Set new dates for collects
#     mode: restart
#     trigger:
#       platform: time
#       at: "01:00:00"
#     condition:
#       - condition: template
#         value_template: '{{ now().date()|string == "2020-09-23" }}'
#     action:
#       - service: input_select.select_option
#         data:
#           entity_id: input_select.collect_trash
#           option: Odd/Wednesday
#       - service: input_select.select_option
#         data:
#           entity_id: input_select.collect_recycle
#           option: Even/Wednesday

  - alias: Cold Storage Light ON Repetitive
    mode: restart
    trigger:
      - platform: time_pattern
        seconds: '/10'        
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: >-
            '{{ as_timestamp(now()) - as_timestamp(states.automation.cold_storage_light_on_immediate.attributes.last_triggered) | int > 120 and 
            as_timestamp(now()) - as_timestamp(states.automation.cold_storage_light_on_immediate.attributes.last_triggered) | int < 3600 and 
            as_timestamp(states.automation.cold_storage_light_on_immediate.attributes.last_triggered) != None }}'
        - condition: template
          value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.cold_storage_light_on_repetitive.attributes.last_triggered) | int > 300 }}'
        - condition: or
          conditions:
            - condition: state
              entity_id: binary_sensor.control_room_light
              state: "on"
              for:
                minutes: 5
            - condition: and
              conditions:
                - condition: state
                  entity_id: binary_sensor.control_room_light
                  state: "on"
                  for:
                    seconds: 30
                - condition: state
                  entity_id: binary_sensor.control_room_door
                  state: "off"
                  for:
                    seconds: 30
    action:
      service_template: >
        {% set jean = states('sensor.iphone_de_jean_distance_home')|int < 15 or is_state('device_tracker.life360_jean', 'home') %}
        {% set cindy = states('sensor.iphone_de_cindy_distance_home')|int < 15 or is_state('device_tracker.life360_cindy', 'home') %}
        {% if jean and cindy %}
          notify.sms_notify_all
        {% elif jean %}
          notify.sms_jean
        {% elif cindy %}
          notify.sms_cindy
        {% else %}
          notify.sms_jean
        {% endif %}
      data:
        message: "Cold Storage Light Still On"
          
  - alias: Cold Storage Light ON Immediate
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.control_room_light
        to: "on"
        for:
           minutes: 5
    action:
      service_template: >
        {% set jean = states('sensor.iphone_de_jean_distance_home')|int < 15 or is_state('device_tracker.life360_jean', 'home') %}
        {% set cindy = states('sensor.iphone_de_cindy_distance_home')|int < 15 or is_state('device_tracker.life360_cindy', 'home') %}
        {% if jean and cindy %}
          notify.sms_notify_all
        {% elif jean %}
          notify.sms_jean
        {% elif cindy %}
          notify.sms_cindy
        {% else %}
          notify.sms_jean
        {% endif %}
      data:
        message: "Cold Storage Light Remained On"

# ACTIONNABLE NOTIFICATIONS

  - alias: Doors unlocked notification
    mode: restart
    trigger:
      - platform: time
        at: "22:00:00"
      - platform: time
        at: "23:00:00"
      - platform: time
        at: "00:00:00"
      - platform: time
        at: "01:00:00"
    condition:
      - condition: state
        entity_id: group.all_locks
        state: "unlocked"
    action:
      - alias: "Set up variables for the actions"
        variables:
          # Including an id in the action allows us to identify this script run
          # and not accidentally trigger for other notification actions
          action_lock: "{{ 'LOCK_' ~ context.id }}"
          action_ignore: "{{ 'IGNORE_' ~ context.id }}"
      - alias: "Ask to lock the doors"
        service: notify.ios_notify_parents
        data:
          message: "The doors are not all locked, lock all now?"
          data:
            ttl: 0
            priority: high
            actions:
              - action: "{{ action_lock }}"
                title: LOCK ALL DOORS
                destructive: false
              - action: "{{ action_ignore }}"
                title: DISMISS
                destructive: true
      - alias: "Wait for a response"
        wait_for_trigger:
          - platform: event
            event_type: mobile_app_notification_action
            event_data:
              # waiting for the specific action avoids accidentally continuing
              # for another script/automation's notification action
              action: "{{ action_lock }}"
          - platform: event
            event_type: mobile_app_notification_action
            event_data:
              action: "{{ action_ignore }}"
      - alias: "Perform the action"
        choose:
          - conditions: "{{ wait.trigger.event.data.action == action_lock }}"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.lock_all
          - conditions: "{{ wait.trigger.event.data.action == action_ignore }}"
            sequence:
              - service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.lock_all