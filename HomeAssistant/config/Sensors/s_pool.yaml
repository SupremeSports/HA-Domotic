####################################################
# SENSORS - POOL                                   #
####################################################

######### POOL CONTROL - BASIC DATA #########
  - platform: mqtt
    name: "Pool Control Status"
    icon: mdi:pool
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: >
      {% set status = value_json.state %}
      {% if status == "ON" %}
        Running...
      {% else %}
        ERROR
      {% endif %}
    json_attributes_topic: "Pool/Control/Json"
    
  - platform: mqtt
    name: "Pool Cabin Temperature"
    unit_of_measurement: '°C'
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: "{{ value_json.temp_out | float | round(1) }}"
    
  - platform: mqtt
    name: "Pool Cabin Humidity"
    unit_of_measurement: '%'
    icon: mdi:water-percent
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: "{{ value_json.hum_out | float | round(1) }}"

  - platform: mqtt
    name: "Pool Control Box Temperature"
    unit_of_measurement: '°C'
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: "{{ value_json.temp_in | float | round(1) }}"
    
  - platform: mqtt
    name: "Pool Control Box Humidity"
    unit_of_measurement: '%'
    icon: mdi:water-percent
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: "{{ value_json.hum_in | float | round(1) }}"
          
  - platform: mqtt
    name: "Pool Control 5V Voltage"
    unit_of_measurement: 'V'
    icon: mdi:flash-outline
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: >
      {% set RV = value_json.Vcc5V | float %}
      
      {% if is_state('binary_sensor.reset_sensors_graphs', 'on') %}
        {{ 0.0 | round(1) }}
      {% else %}
        {{ RV | round(1) }}
      {% endif %}
    
  - platform: mqtt
    name: "Pool Control 12V Voltage"
    unit_of_measurement: 'V'
    icon: mdi:flash-outline
    state_topic: "Pool/Control/Json"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    value_template: >
      {% set RV = value_json.Vcc12V | float %}
      
      {% if is_state('binary_sensor.reset_sensors_graphs', 'on') %}
        {{ 0.0 | round(1) }}
      {% else %}
        {{ RV | round(1) }}
      {% endif %}
          
  - platform: template
    sensors:
      poolpump_status:
        friendly_name: "Pool Pump"
        value_template: >
          {% if is_state('switch.pool_pump', 'on') %}
            {% if is_state('binary_sensor.antifreeze_active', 'on') %}
              Run Low Temp
            {% else %}
              On
            {% endif %}
          {% elif is_state('switch.pool_pump', 'off') %}
            {% if is_state('binary_sensor.pool_level_low', 'off')%}
              Low Level
            {% else %}
              Off
            {% endif %}
          {% else %}
            unknown
          {% endif %}
        availability_template: >
          {{ not is_state('switch.pool_pump', 'unavailable') }}
        icon_template: >
          mdi:pump
          
      pool_heater_status:
        friendly_name_template: >
          {% if is_state('switch.pool_heater', 'on') and is_state('binary_sensor.pool_heater_run', 'on') %}
            {% set differential = states('sensor.pool_heater_temp')|float - states('sensor.pool_temperature') | float %}
            {% if differential < 0.0 %}
              {% set differential = 0.0 %}
            {% endif %}
            Pool Heater Status: +{{ differential|round(1) }}°C
          {% else %}
            Pool Heater Status
          {% endif %}
        value_template: >
          {% if is_state('switch.pool_heater', 'off') %}
            Off
          {% elif is_state('switch.pool_heater', 'on') and is_state('binary_sensor.pool_heater_run', 'on') %}
            Heating
          {% else %}
            Ready
          {% endif %}
        availability_template: >
          {{ not is_state('switch.pool_heater', 'unavailable') }}
        icon_template: >
          {% if is_state('switch.pool_heater', 'off') %}
            mdi:radiator-off
          {% elif is_state('switch.pool_heater', 'on') and is_state('binary_sensor.pool_heater_run', 'on') %}
            mdi:radiator
          {% else %}
            mdi:radiator-disabled
          {% endif %}
        attribute_templates:
          water_in: "{{ states('sensor.pool_temperature') }}"
          water_out: "{{ states('sensor.pool_heater_temp') }}"
          heating: "{{ is_state('binary_sensor.pool_heater_run', 'on') }}"
    
######### POOL CONTROL - SENSORS #########
  - platform: mqtt
    name: "Pool Temperature Raw"
    icon: mdi:thermometer
    state_topic: "Pool/Control/Sensors/Stts"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    unit_of_measurement: '° F'
    value_template: >
      {% set RT = value_json.wtemp|float %}
      {% set TF = ((0.16014*RT)-5.69819)+2.4|float %}
      
      {% if is_state('binary_sensor.reset_sensors_graphs', 'on') %}
        {{ 50.0 | round(1) }}
      {% else %}
        {{ TF | round(1) }}
      {% endif %}
      
  - platform: statistics
    name: "Pool Temperature Stats"
    entity_id: sensor.pool_temperature_raw
    #sampling_size: 100
    max_age:
      minutes: 10
    precision: 1
    
  - platform: template
    sensors:
      pool_temperature:
        friendly_name: "Pool Temperature"
        unit_of_measurement: '° F'
        value_template: >
          {{ states('sensor.pool_temperature_stats') }}
        availability_template: >
          {{ not is_state('sensor.pool_temperature_raw', 'unavailable') }}
        icon_template: mdi:thermometer
        attribute_templates:
          temp_raw: "{{ states('sensor.pool_temperature_raw') }}"
          temp_mean: "{{ state_attr('sensor.pool_temperature_stats', 'mean') }}"
          temp_min: "{{ state_attr('sensor.pool_temperature_stats', 'min_value') }}"
          temp_max: "{{ state_attr('sensor.pool_temperature_stats', 'max_value') }}"
      
  - platform: mqtt
    name: "Pool Heater Temp Raw"
    icon: mdi:thermometer
    state_topic: "Pool/Control/Sensors/Stts"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    unit_of_measurement: '° F'
    value_template: >
      {% set RT = value_json.htemp|float %}
      {% set TF = ((0.16014*RT)-5.69819)+2.0|float %}
      
      {% if is_state('binary_sensor.reset_sensors_graphs', 'on') %}
        {{ 50.0 | round(1) }}
      {% else %}
        {{ TF | round(1) }}
      {% endif %}
      
  - platform: statistics
    name: "Pool Heater Temp Stats"
    entity_id: sensor.pool_heater_temp_raw
    max_age:
      minutes: 10
    precision: 1
    
  - platform: template
    sensors:
      pool_heater_temp:
        friendly_name: "Pool Heater Temp"
        unit_of_measurement: '° F'
        value_template: >
          {{ states('sensor.pool_heater_temp_stats') }}
        availability_template: >
          {{ not is_state('sensor.pool_heater_temp_raw', 'unavailable') }}
        icon_template: mdi:thermometer
        attribute_templates:
          temp_raw: "{{ states('sensor.pool_heater_temp_raw') }}"
          temp_mean: "{{ state_attr('sensor.pool_heater_temp_stats', 'mean') }}"
          temp_min: "{{ state_attr('sensor.pool_heater_temp_stats', 'min_value') }}"
          temp_max: "{{ state_attr('sensor.pool_heater_temp_stats', 'max_value') }}"
      
  - platform: mqtt
    name: "Pool Pump Temp Raw"
    icon: mdi:thermometer
    state_topic: "Pool/Control/Sensors/Stts"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    unit_of_measurement: '°C'
    value_template: >
      {% set RT = value_json.ptemp|float %}
      {% set TC = ((0.08897*RT)-20.94344)+3.6|float %}
      {{ TC | round(1) }}
      
  - platform: statistics
    name: "Pool Pump Temp Stats"
    entity_id: sensor.pool_pump_temp_raw
    max_age:
      minutes: 10
    precision: 1
    
  - platform: template
    sensors:
      pool_pump_temp:
        friendly_name: "Pool Pump Temp"
        unit_of_measurement: '°C'
        value_template: >
          {{ states('sensor.pool_pump_temp_stats') }}
        availability_template: >
          {{ not is_state('sensor.pool_pump_temp_raw', 'unavailable') }}
        icon_template: mdi:thermometer
        attribute_templates:
          temp_raw: "{{ states('sensor.pool_pump_temp_raw') }}"
          temp_mean: "{{ state_attr('sensor.pool_pump_temp_stats', 'mean') }}"
          temp_min: "{{ state_attr('sensor.pool_pump_temp_stats', 'min_value') }}"
          temp_max: "{{ state_attr('sensor.pool_pump_temp_stats', 'max_value') }}"

  - platform: mqtt
    name: "Pool Pressure Raw"
    icon: mdi:gauge
    state_topic: "Pool/Control/Sensors/Stts"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    unit_of_measurement: 'psi'
    value_template: >
      {{ value_json.wpsi|int }}
      
  - platform: template
    sensors:
      pool_pressure:
        friendly_name: "Pool Pressure"
        unit_of_measurement: 'psi'
        value_template: >
          {% set RP = states('sensor.pool_pressure_raw')|float %}
          {% set min = 0.5|float %} 
          {% set span = 4.0|float %}
          {% set presmax = 70.0|float %}
          
          {% if RP < 104 and RP > 30 %}
            {% set RP = 104.0 %}
          {% endif %}
          
          {% set ax = (presmax / span)|float %}
          {% set b = (ax * min * -1.0)|float %}
          {% set ax = ((ax * 5.0) / 1023.0)|float %}
          
          {% set PV = ((ax*RP)+b)|float %}
          
          {% if PV < -0.2 or PV > 50.0 %}
            {{ "unknown" }}
          {% elif PV < 1.0 %}
            {{ 0.0 | round(1) }}
          {% elif is_state('binary_sensor.reset_sensors_graphs', 'on') %}
            {{ 0.0 | round(1) }}
          {% else %}
            {{ PV | round(1, "half") }}
          {% endif %}
        availability_template: >
          {{ not is_state('sensor.pool_pressure_raw', 'unavailable') }}
        icon_template: mdi:gauge
        attribute_templates:
          pres_raw: "{{ states('sensor.pool_pressure_raw') }}"
          
  - platform: mqtt
    name: "Pool PH"
    icon: mdi:flask
    state_topic: "Pool/Control/Sensors/Stts"
    availability:
      - topic: "Pool/Control/LWT"
    qos: 0
    unit_of_measurement: 'pH'
    value_template: >
      {% set PH = value_json.wph|float %}
      {% set ax = 0.01369|float %}
      {% set b = 0.000|float %}
      
      {% set PHO = ((ax*PH)+b)|float %}
      
      {% set PHO = 0.0|float %}
      
      {% if PHO <= 4.0 or PHO >= 9.0 %}
        {{ "unknown" }}
      {% else %}
        {{ PHO | round(1) }}
      {% endif %}

  - platform: history_stats
    name: Pool Filler Timer
    entity_id: binary_sensor.poolfiller_status
    state: 'on'
    type: time
    end: '{{ now() }}'
    duration:
      hours: 24
    
  - platform: mqtt
    name: "Pool Clock Status"
    icon: mdi:clock
    state_topic: "Pool/Clock/Json"
    availability:
      - topic: "Pool/Clock/LWT"
    qos: 0
    value_template: >
      {% set status = value_json.state %}
      
      {% if is_state('light.pool_clock', 'on') %}
        On
      {% elif status == "ON" %}
        Running...
      {% else %}
        ERROR
      {% endif %}
    json_attributes_topic: "Pool/Clock/Json"
    
######### POOL CONTROL - GATES #########
  - platform: template
    sensors:
      pool_gates:
        friendly_name_template: >
          {% set deck = is_state('binary_sensor.pool_gate_closed_deck', 'on') %}
          {% set main = is_state('binary_sensor.pool_gate_closed_main', 'on') %}
          {% set pond = is_state('binary_sensor.pool_gate_closed_pond', 'on') %}
          
          {% set count = 0 %}
          {% if deck %}
            {% set count = count+1 %}
          {% endif %}
          {% if main %}
            {% set count = count+1 %}
          {% endif %}
          {% if pond %}
            {% set count = count+1 %}
          {% endif %}
          
          {{-'Pool Gates'-}}
          
          {% if count > 0 -%}
            {% for device in states.binary_sensor if 'pool_gate_closed_' in device.entity_id if device.state == 'on' %}
               {%- if loop.first -%}{{': '}}{% elif loop.last %}{{' & '}}{% else %}{{', '}}{% endif -%}
               {{ device.attributes['friendly_name'].replace('Pool Gate Closed - ','') }}
            {%- endfor -%}
          {% endif %}
        value_template: >
          {% set deck = is_state('binary_sensor.pool_gate_closed_deck', 'off') %}
          {% set pond = is_state('binary_sensor.pool_gate_closed_main', 'off') %}
          {% set main = is_state('binary_sensor.pool_gate_closed_pond', 'off') %}
          
          {% set PG = deck and pond and main %}
          
          {% if PG %}
            Ok
          {% else %}
            Opened
          {% endif %}
        availability_template: >-
          {{ not is_state('binary_sensor.pool_gate_closed_deck', 'unavailable') and
             not is_state('binary_sensor.pool_gate_closed_main', 'unavailable') and
             not is_state('binary_sensor.pool_gate_closed_pond', 'unavailable') }}
        attribute_templates:
          deck: >
            {% if is_state('binary_sensor.pool_gate_closed_deck', 'off') %}
              Closed
            {% elif is_state('binary_sensor.pool_gate_closed_deck', 'on') %}
              Opened
            {% else %}
              NA
            {% endif %}
          main: >
            {% if is_state('binary_sensor.pool_gate_closed_main', 'off') %}
              Closed
            {% elif is_state('binary_sensor.pool_gate_closed_main', 'on') %}
              Opened
            {% else %}
              NA
            {% endif %}
          pond: >
            {% if is_state('binary_sensor.pool_gate_closed_pond', 'off') %}
              Closed
            {% elif is_state('binary_sensor.pool_gate_closed_pond', 'on') %}
              Opened
            {% else %}
              NA
            {% endif %}

  - platform: history_stats
    name: Pool Gate Count - Deck
    entity_id: binary_sensor.pool_gate_closed_deck
    state: 'on'
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: '{{ now() }}'
    # duration:
      # hours: 24

  - platform: history_stats
    name: Pool Gate Count - Main
    entity_id: binary_sensor.pool_gate_closed_main
    state: 'on'
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: '{{ now() }}'
    # duration:
      # hours: 24
      
  - platform: history_stats
    name: Pool Gate Count - Pond
    entity_id: binary_sensor.pool_gate_closed_pond
    state: 'on'
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: '{{ now() }}'
    # duration:
      # hours: 24
      